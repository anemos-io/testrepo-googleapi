syntax = "proto3";

package google.iam.credentials.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/iam/credentials/v1/common.proto";

option java_package = "com.google.cloud.iam.credentials.v1";
option java_outer_classname = "IAMCredentialsProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/iam/credentials/v1;credentials";
option cc_enable_arenas = true;
option csharp_namespace = "Google.Cloud.Iam.Credentials.V1";


service IAMCredentials {
	option (google.api.default_host) = "iamcredentials.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc GenerateAccessToken(google.iam.credentials.v1.GenerateAccessTokenRequest) returns (google.iam.credentials.v1.GenerateAccessTokenResponse) {
		option (google.api.method_signature) = "name,delegates,scope,lifetime";
		option (google.api.http) = {
			post: "/v1/{name=projects/*/serviceAccounts/*}:generateAccessToken"
			body: "*"
		};

	}
	rpc GenerateIdToken(google.iam.credentials.v1.GenerateIdTokenRequest) returns (google.iam.credentials.v1.GenerateIdTokenResponse) {
		option (google.api.method_signature) = "name,delegates,audience,include_email";
		option (google.api.http) = {
			post: "/v1/{name=projects/*/serviceAccounts/*}:generateIdToken"
			body: "*"
		};

	}
	rpc SignBlob(google.iam.credentials.v1.SignBlobRequest) returns (google.iam.credentials.v1.SignBlobResponse) {
		option (google.api.method_signature) = "name,delegates,payload";
		option (google.api.http) = {
			post: "/v1/{name=projects/*/serviceAccounts/*}:signBlob"
			body: "*"
		};

	}
	rpc SignJwt(google.iam.credentials.v1.SignJwtRequest) returns (google.iam.credentials.v1.SignJwtResponse) {
		option (google.api.method_signature) = "name,delegates,payload";
		option (google.api.http) = {
			post: "/v1/{name=projects/*/serviceAccounts/*}:signJwt"
			body: "*"
		};

	}
}
