syntax = "proto3";

package google.cloud.gaming.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/cloud/gaming/v1/game_server_deployments.proto";
import "google/longrunning/operations.proto";

option java_package = "com.google.cloud.gaming.v1";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/gaming/v1;gaming";


service GameServerDeploymentsService {
	option (google.api.default_host) = "gameservices.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc ListGameServerDeployments(google.cloud.gaming.v1.ListGameServerDeploymentsRequest) returns (google.cloud.gaming.v1.ListGameServerDeploymentsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/gameServerDeployments"
		};

	}
	rpc GetGameServerDeployment(google.cloud.gaming.v1.GetGameServerDeploymentRequest) returns (google.cloud.gaming.v1.GameServerDeployment) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/gameServerDeployments/*}"
		};

	}
	rpc CreateGameServerDeployment(google.cloud.gaming.v1.CreateGameServerDeploymentRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "GameServerDeployment"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,game_server_deployment";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/gameServerDeployments"
			body: "game_server_deployment"
		};

	}
	rpc DeleteGameServerDeployment(google.cloud.gaming.v1.DeleteGameServerDeploymentRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/gameServerDeployments/*}"
		};

	}
	rpc UpdateGameServerDeployment(google.cloud.gaming.v1.UpdateGameServerDeploymentRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "GameServerDeployment"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "game_server_deployment,update_mask";
		option (google.api.http) = {
			patch: "/v1/{game_server_deployment.name=projects/*/locations/*/gameServerDeployments/*}"
			body: "game_server_deployment"
		};

	}
	rpc GetGameServerDeploymentRollout(google.cloud.gaming.v1.GetGameServerDeploymentRolloutRequest) returns (google.cloud.gaming.v1.GameServerDeploymentRollout) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/gameServerDeployments/*}/rollout"
		};

	}
	rpc UpdateGameServerDeploymentRollout(google.cloud.gaming.v1.UpdateGameServerDeploymentRolloutRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "GameServerDeployment"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "rollout,update_mask";
		option (google.api.http) = {
			patch: "/v1/{rollout.name=projects/*/locations/*/gameServerDeployments/*}/rollout"
			body: "rollout"
		};

	}
	rpc PreviewGameServerDeploymentRollout(google.cloud.gaming.v1.PreviewGameServerDeploymentRolloutRequest) returns (google.cloud.gaming.v1.PreviewGameServerDeploymentRolloutResponse) {
		option (google.api.http) = {
			patch: "/v1/{rollout.name=projects/*/locations/*/gameServerDeployments/*}/rollout:preview"
			body: "rollout"
		};

	}
	rpc FetchDeploymentState(google.cloud.gaming.v1.FetchDeploymentStateRequest) returns (google.cloud.gaming.v1.FetchDeploymentStateResponse) {
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/gameServerDeployments/*}:fetchDeploymentState"
			body: "*"
		};

	}
}
