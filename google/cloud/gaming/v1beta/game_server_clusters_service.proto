syntax = "proto3";

package google.cloud.gaming.v1beta;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/cloud/gaming/v1beta/game_server_clusters.proto";
import "google/longrunning/operations.proto";

option java_package = "com.google.cloud.gaming.v1beta";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/gaming/v1beta;gaming";
option php_namespace = "Google\\Cloud\\Gaming\\V1beta";


service GameServerClustersService {
	option (google.api.default_host) = "gameservices.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc ListGameServerClusters(google.cloud.gaming.v1beta.ListGameServerClustersRequest) returns (google.cloud.gaming.v1beta.ListGameServerClustersResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1beta/{parent=projects/*/locations/*/realms/*}/gameServerClusters"
		};

	}
	rpc GetGameServerCluster(google.cloud.gaming.v1beta.GetGameServerClusterRequest) returns (google.cloud.gaming.v1beta.GameServerCluster) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1beta/{name=projects/*/locations/*/realms/*/gameServerClusters/*}"
		};

	}
	rpc CreateGameServerCluster(google.cloud.gaming.v1beta.CreateGameServerClusterRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "GameServerCluster"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,game_server_cluster,game_server_cluster_id";
		option (google.api.http) = {
			post: "/v1beta/{parent=projects/*/locations/*/realms/*}/gameServerClusters"
			body: "game_server_cluster"
		};

	}
	rpc PreviewCreateGameServerCluster(google.cloud.gaming.v1beta.PreviewCreateGameServerClusterRequest) returns (google.cloud.gaming.v1beta.PreviewCreateGameServerClusterResponse) {
		option (google.api.http) = {
			post: "/v1beta/{parent=projects/*/locations/*/realms/*}/gameServerClusters:previewCreate"
			body: "game_server_cluster"
		};

	}
	rpc DeleteGameServerCluster(google.cloud.gaming.v1beta.DeleteGameServerClusterRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1beta/{name=projects/*/locations/*/realms/*/gameServerClusters/*}"
		};

	}
	rpc PreviewDeleteGameServerCluster(google.cloud.gaming.v1beta.PreviewDeleteGameServerClusterRequest) returns (google.cloud.gaming.v1beta.PreviewDeleteGameServerClusterResponse) {
		option (google.api.http) = {
			delete: "/v1beta/{name=projects/*/locations/*/realms/*/gameServerClusters/*}:previewDelete"
		};

	}
	rpc UpdateGameServerCluster(google.cloud.gaming.v1beta.UpdateGameServerClusterRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "GameServerCluster"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "game_server_cluster,update_mask";
		option (google.api.http) = {
			patch: "/v1beta/{game_server_cluster.name=projects/*/locations/*/realms/*/gameServerClusters/*}"
			body: "game_server_cluster"
		};

	}
	rpc PreviewUpdateGameServerCluster(google.cloud.gaming.v1beta.PreviewUpdateGameServerClusterRequest) returns (google.cloud.gaming.v1beta.PreviewUpdateGameServerClusterResponse) {
		option (google.api.http) = {
			patch: "/v1beta/{game_server_cluster.name=projects/*/locations/*/realms/*/gameServerClusters/*}:previewUpdate"
			body: "game_server_cluster"
		};

	}
}
