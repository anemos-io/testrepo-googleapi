syntax = "proto3";

package google.cloud.tpu.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.cloud.tpu.v1";
option java_outer_classname = "CloudTpuProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/tpu/v1;tpu";


service Tpu {
	option (google.api.default_host) = "tpu.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc ListNodes(google.cloud.tpu.v1.ListNodesRequest) returns (google.cloud.tpu.v1.ListNodesResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/nodes"
		};

	}
	rpc GetNode(google.cloud.tpu.v1.GetNodeRequest) returns (google.cloud.tpu.v1.Node) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/nodes/*}"
		};

	}
	rpc CreateNode(google.cloud.tpu.v1.CreateNodeRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Node"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,node,node_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/nodes"
			body: "node"
		};

	}
	rpc DeleteNode(google.cloud.tpu.v1.DeleteNodeRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Node"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/nodes/*}"
		};

	}
	rpc ReimageNode(google.cloud.tpu.v1.ReimageNodeRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Node"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/nodes/*}:reimage"
			body: "*"
		};

	}
	rpc StopNode(google.cloud.tpu.v1.StopNodeRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Node"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/nodes/*}:stop"
			body: "*"
		};

	}
	rpc StartNode(google.cloud.tpu.v1.StartNodeRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Node"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/nodes/*}:start"
			body: "*"
		};

	}
	rpc ListTensorFlowVersions(google.cloud.tpu.v1.ListTensorFlowVersionsRequest) returns (google.cloud.tpu.v1.ListTensorFlowVersionsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/tensorflowVersions"
		};

	}
	rpc GetTensorFlowVersion(google.cloud.tpu.v1.GetTensorFlowVersionRequest) returns (google.cloud.tpu.v1.TensorFlowVersion) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/tensorflowVersions/*}"
		};

	}
	rpc ListAcceleratorTypes(google.cloud.tpu.v1.ListAcceleratorTypesRequest) returns (google.cloud.tpu.v1.ListAcceleratorTypesResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/acceleratorTypes"
		};

	}
	rpc GetAcceleratorType(google.cloud.tpu.v1.GetAcceleratorTypeRequest) returns (google.cloud.tpu.v1.AcceleratorType) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/acceleratorTypes/*}"
		};

	}
}

message SchedulingConfig {

	bool preemptible = 1;
	bool reserved = 2;
}

message NetworkEndpoint {

	string ip_address = 1;
	int32 port = 2;
}

message Node {
	option (google.api.resource) = {
		type: "tpu.googleapis.com/Node"
		pattern: ["projects/{project}/locations/{location}/nodes/{node}"]
	};

	enum State {

		STATE_UNSPECIFIED = 0;
		CREATING = 1;
		READY = 2;
		RESTARTING = 3;
		REIMAGING = 4;
		DELETING = 5;
		REPAIRING = 6;
		STOPPED = 8;
		STOPPING = 9;
		STARTING = 10;
		PREEMPTED = 11;
		TERMINATED = 12;
		HIDING = 13;
		HIDDEN = 14;
		UNHIDING = 15;
	}

	enum Health {

		HEALTH_UNSPECIFIED = 0;
		HEALTHY = 1;
		DEPRECATED_UNHEALTHY = 2;
		TIMEOUT = 3;
		UNHEALTHY_TENSORFLOW = 4;
		UNHEALTHY_MAINTENANCE = 5;
	}

	enum ApiVersion {

		API_VERSION_UNSPECIFIED = 0;
		V1_ALPHA1 = 1;
		V1 = 2;
		V2_ALPHA1 = 3;
	}

	string name = 1 [
		(google.api.field_behavior) = IMMUTABLE,
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string description = 3;
	string accelerator_type = 5 [
		(google.api.field_behavior) = REQUIRED
	];
	string ip_address = 8 [
		deprecated = true
	];
	string port = 14 [
		deprecated = true
	];
	State state = 9 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string health_description = 10 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string tensorflow_version = 11 [
		(google.api.field_behavior) = REQUIRED
	];
	string network = 12;
	string cidr_block = 13;
	string service_account = 15 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp create_time = 16 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	SchedulingConfig scheduling_config = 17;
	repeated NetworkEndpoint network_endpoints = 21 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	Health health = 22;
	map<string, string> labels = 24;
	bool use_service_networking = 27;
	ApiVersion api_version = 38 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	repeated Symptom symptoms = 39 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message ListNodesRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "tpu.googleapis.com/Node"
		}
	];
	int32 page_size = 2;
	string page_token = 3;
}

message ListNodesResponse {

	repeated Node nodes = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message GetNodeRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "tpu.googleapis.com/Node"
		}
	];
}

message CreateNodeRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "tpu.googleapis.com/Node"
		}
	];
	string node_id = 2;
	Node node = 3 [
		(google.api.field_behavior) = REQUIRED
	];
}

message DeleteNodeRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "tpu.googleapis.com/Node"
		}
	];
}

message ReimageNodeRequest {

	string name = 1;
	string tensorflow_version = 2;
}

message StopNodeRequest {

	string name = 1;
}

message StartNodeRequest {

	string name = 1;
}

message TensorFlowVersion {
	option (google.api.resource) = {
		type: "tpu.googleapis.com/TensorFlowVersion"
		pattern: ["projects/{project}/locations/{location}/tensorFlowVersions/{tensor_flow_version}"]
	};

	string name = 1;
	string version = 2;
}

message GetTensorFlowVersionRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "tpu.googleapis.com/TensorFlowVersion"
		}
	];
}

message ListTensorFlowVersionsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "tpu.googleapis.com/TensorFlowVersion"
		}
	];
	int32 page_size = 2;
	string page_token = 3;
	string filter = 5;
	string order_by = 6;
}

message ListTensorFlowVersionsResponse {

	repeated TensorFlowVersion tensorflow_versions = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message AcceleratorType {
	option (google.api.resource) = {
		type: "tpu.googleapis.com/AcceleratorType"
		pattern: ["projects/{project}/locations/{location}/acceleratorTypes/{accelerator_type}"]
	};

	string name = 1;
	string type = 2;
}

message GetAcceleratorTypeRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "tpu.googleapis.com/AcceleratorType"
		}
	];
}

message ListAcceleratorTypesRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "tpu.googleapis.com/AcceleratorType"
		}
	];
	int32 page_size = 2;
	string page_token = 3;
	string filter = 5;
	string order_by = 6;
}

message ListAcceleratorTypesResponse {

	repeated AcceleratorType accelerator_types = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message OperationMetadata {

	google.protobuf.Timestamp create_time = 1;
	google.protobuf.Timestamp end_time = 2;
	string target = 3;
	string verb = 4;
	string status_detail = 5;
	bool cancel_requested = 6;
	string api_version = 7;
}

message Symptom {

	enum SymptomType {

		SYMPTOM_TYPE_UNSPECIFIED = 0;
		LOW_MEMORY = 1;
		OUT_OF_MEMORY = 2;
		EXECUTE_TIMED_OUT = 3;
		MESH_BUILD_FAIL = 4;
		HBM_OUT_OF_MEMORY = 5;
		PROJECT_ABUSE = 6;
	}

	google.protobuf.Timestamp create_time = 1;
	SymptomType symptom_type = 2;
	string details = 3;
	string worker_id = 4;
}
