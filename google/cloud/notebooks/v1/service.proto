syntax = "proto3";

package google.cloud.notebooks.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/cloud/notebooks/v1/environment.proto";
import "google/cloud/notebooks/v1/execution.proto";
import "google/cloud/notebooks/v1/instance.proto";
import "google/cloud/notebooks/v1/instance_config.proto";
import "google/cloud/notebooks/v1/schedule.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.cloud.notebooks.v1";
option java_outer_classname = "NotebooksProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/notebooks/v1;notebooks";
option csharp_namespace = "Google.Cloud.Notebooks.V1";
option php_namespace = "Google\\Cloud\\Notebooks\\V1";
option ruby_package = "Google::Cloud::Notebooks::V1";


service NotebookService {
	option (google.api.default_host) = "notebooks.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc ListInstances(google.cloud.notebooks.v1.ListInstancesRequest) returns (google.cloud.notebooks.v1.ListInstancesResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/instances"
		};

	}
	rpc GetInstance(google.cloud.notebooks.v1.GetInstanceRequest) returns (google.cloud.notebooks.v1.Instance) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/instances/*}"
		};

	}
	rpc CreateInstance(google.cloud.notebooks.v1.CreateInstanceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,instance,instance_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/instances"
			body: "instance"
		};

	}
	rpc RegisterInstance(google.cloud.notebooks.v1.RegisterInstanceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/instances:register"
			body: "*"
		};

	}
	rpc SetInstanceAccelerator(google.cloud.notebooks.v1.SetInstanceAcceleratorRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			patch: "/v1/{name=projects/*/locations/*/instances/*}:setAccelerator"
			body: "*"
		};

	}
	rpc SetInstanceMachineType(google.cloud.notebooks.v1.SetInstanceMachineTypeRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			patch: "/v1/{name=projects/*/locations/*/instances/*}:setMachineType"
			body: "*"
		};

	}
	rpc UpdateInstanceConfig(google.cloud.notebooks.v1.UpdateInstanceConfigRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			patch: "/v1/{name=projects/*/locations/*/instances/*}:updateConfig"
			body: "*"
		};

	}
	rpc UpdateShieldedInstanceConfig(google.cloud.notebooks.v1.UpdateShieldedInstanceConfigRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			patch: "/v1/{name=projects/*/locations/*/instances/*}:updateShieldedInstanceConfig"
			body: "*"
		};

	}
	rpc SetInstanceLabels(google.cloud.notebooks.v1.SetInstanceLabelsRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			patch: "/v1/{name=projects/*/locations/*/instances/*}:setLabels"
			body: "*"
		};

	}
	rpc DeleteInstance(google.cloud.notebooks.v1.DeleteInstanceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/instances/*}"
		};

	}
	rpc StartInstance(google.cloud.notebooks.v1.StartInstanceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/instances/*}:start"
			body: "*"
		};

	}
	rpc StopInstance(google.cloud.notebooks.v1.StopInstanceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/instances/*}:stop"
			body: "*"
		};

	}
	rpc ResetInstance(google.cloud.notebooks.v1.ResetInstanceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/instances/*}:reset"
			body: "*"
		};

	}
	rpc ReportInstanceInfo(google.cloud.notebooks.v1.ReportInstanceInfoRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/instances/*}:report"
			body: "*"
		};

	}
	rpc IsInstanceUpgradeable(google.cloud.notebooks.v1.IsInstanceUpgradeableRequest) returns (google.cloud.notebooks.v1.IsInstanceUpgradeableResponse) {
		option (google.api.http) = {
			get: "/v1/{notebook_instance=projects/*/locations/*/instances/*}:isUpgradeable"
		};

	}
	rpc GetInstanceHealth(google.cloud.notebooks.v1.GetInstanceHealthRequest) returns (google.cloud.notebooks.v1.GetInstanceHealthResponse) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/instances/*}:getInstanceHealth"
		};

	}
	rpc UpgradeInstance(google.cloud.notebooks.v1.UpgradeInstanceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/instances/*}:upgrade"
			body: "*"
		};

	}
	rpc RollbackInstance(google.cloud.notebooks.v1.RollbackInstanceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/instances/*}:rollback"
			body: "*"
		};

	}
	rpc UpgradeInstanceInternal(google.cloud.notebooks.v1.UpgradeInstanceInternalRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Instance"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/instances/*}:upgradeInternal"
			body: "*"
		};

	}
	rpc ListEnvironments(google.cloud.notebooks.v1.ListEnvironmentsRequest) returns (google.cloud.notebooks.v1.ListEnvironmentsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/environments"
		};

	}
	rpc GetEnvironment(google.cloud.notebooks.v1.GetEnvironmentRequest) returns (google.cloud.notebooks.v1.Environment) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/environments/*}"
		};

	}
	rpc CreateEnvironment(google.cloud.notebooks.v1.CreateEnvironmentRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Environment"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,environment,environment_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/environments"
			body: "environment"
		};

	}
	rpc DeleteEnvironment(google.cloud.notebooks.v1.DeleteEnvironmentRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/environments/*}"
		};

	}
	rpc ListSchedules(google.cloud.notebooks.v1.ListSchedulesRequest) returns (google.cloud.notebooks.v1.ListSchedulesResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/schedules"
		};

	}
	rpc GetSchedule(google.cloud.notebooks.v1.GetScheduleRequest) returns (google.cloud.notebooks.v1.Schedule) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/schedules/*}"
		};

	}
	rpc DeleteSchedule(google.cloud.notebooks.v1.DeleteScheduleRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/schedules/*}"
		};

	}
	rpc CreateSchedule(google.cloud.notebooks.v1.CreateScheduleRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Schedule"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,schedule,schedule_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/schedules"
			body: "schedule"
		};

	}
	rpc TriggerSchedule(google.cloud.notebooks.v1.TriggerScheduleRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Schedule"
			metadata_type: "OperationMetadata"
		};
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/schedules/*}:trigger"
			body: "*"
		};

	}
	rpc ListExecutions(google.cloud.notebooks.v1.ListExecutionsRequest) returns (google.cloud.notebooks.v1.ListExecutionsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/executions"
		};

	}
	rpc GetExecution(google.cloud.notebooks.v1.GetExecutionRequest) returns (google.cloud.notebooks.v1.Execution) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/executions/*}"
		};

	}
	rpc DeleteExecution(google.cloud.notebooks.v1.DeleteExecutionRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/executions/*}"
		};

	}
	rpc CreateExecution(google.cloud.notebooks.v1.CreateExecutionRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Execution"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,execution,execution_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/executions"
			body: "execution"
		};

	}
}

message OperationMetadata {

	google.protobuf.Timestamp create_time = 1;
	google.protobuf.Timestamp end_time = 2;
	string target = 3;
	string verb = 4;
	string status_message = 5;
	bool requested_cancellation = 6;
	string api_version = 7;
	string endpoint = 8;
}

message ListInstancesRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	int32 page_size = 2;
	string page_token = 3;
}

message ListInstancesResponse {

	repeated google.cloud.notebooks.v1.Instance instances = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message GetInstanceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message CreateInstanceRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string instance_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	google.cloud.notebooks.v1.Instance instance = 3 [
		(google.api.field_behavior) = REQUIRED
	];
}

message RegisterInstanceRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string instance_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message SetInstanceAcceleratorRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.cloud.notebooks.v1.Instance.AcceleratorType type = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	int64 core_count = 3 [
		(google.api.field_behavior) = REQUIRED
	];
}

message SetInstanceMachineTypeRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string machine_type = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message UpdateInstanceConfigRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.cloud.notebooks.v1.InstanceConfig config = 2;
}

message SetInstanceLabelsRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	map<string, string> labels = 2;
}

message UpdateShieldedInstanceConfigRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.cloud.notebooks.v1.Instance.ShieldedInstanceConfig shielded_instance_config = 2;
}

message DeleteInstanceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message StartInstanceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message StopInstanceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message ResetInstanceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message ReportInstanceInfoRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string vm_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	map<string, string> metadata = 3;
}

message IsInstanceUpgradeableRequest {

	string notebook_instance = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message IsInstanceUpgradeableResponse {

	bool upgradeable = 1;
	string upgrade_version = 2;
	string upgrade_info = 3;
	string upgrade_image = 4;
}

message GetInstanceHealthRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Instance"
		}
	];
}

message GetInstanceHealthResponse {

	enum HealthState {

		HEALTH_STATE_UNSPECIFIED = 0;
		HEALTHY = 1;
		UNHEALTHY = 2;
		AGENT_NOT_INSTALLED = 3;
		AGENT_NOT_RUNNING = 4;
	}

	HealthState health_state = 1 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	map<string, string> health_info = 2 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message UpgradeInstanceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message RollbackInstanceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string target_snapshot = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message UpgradeInstanceInternalRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string vm_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message ListEnvironmentsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	int32 page_size = 2;
	string page_token = 3;
}

message ListEnvironmentsResponse {

	repeated google.cloud.notebooks.v1.Environment environments = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message GetEnvironmentRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message CreateEnvironmentRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string environment_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	google.cloud.notebooks.v1.Environment environment = 3 [
		(google.api.field_behavior) = REQUIRED
	];
}

message DeleteEnvironmentRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message ListSchedulesRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Schedule"
		}
	];
	int32 page_size = 2;
	string page_token = 3;
	string filter = 4;
	string order_by = 5;
}

message ListSchedulesResponse {

	repeated google.cloud.notebooks.v1.Schedule schedules = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message GetScheduleRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Schedule"
		}
	];
}

message DeleteScheduleRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Schedule"
		}
	];
}

message CreateScheduleRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Schedule"
		}
	];
	string schedule_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	google.cloud.notebooks.v1.Schedule schedule = 3 [
		(google.api.field_behavior) = REQUIRED
	];
}

message TriggerScheduleRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Schedule"
		}
	];
}

message ListExecutionsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Execution"
		}
	];
	int32 page_size = 2;
	string page_token = 3;
	string filter = 4;
	string order_by = 5;
}

message ListExecutionsResponse {

	repeated google.cloud.notebooks.v1.Execution executions = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message GetExecutionRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Execution"
		}
	];
}

message DeleteExecutionRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Execution"
		}
	];
}

message CreateExecutionRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "notebooks.googleapis.com/Execution"
		}
	];
	string execution_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	google.cloud.notebooks.v1.Execution execution = 3 [
		(google.api.field_behavior) = REQUIRED
	];
}
