syntax = "proto3";

package google.cloud.bigquery.storage.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/cloud/bigquery/storage/v1/arrow.proto";
import "google/cloud/bigquery/storage/v1/avro.proto";
import "google/cloud/bigquery/storage/v1/stream.proto";

option java_package = "com.google.cloud.bigquery.storage.v1";
option java_outer_classname = "StorageProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/bigquery/storage/v1;storage";
option csharp_namespace = "Google.Cloud.BigQuery.Storage.V1";
option php_namespace = "Google\\Cloud\\BigQuery\\Storage\\V1";
option (google.api.resource_definition) = {
	type: "bigquery.googleapis.com/Table"
	pattern: ["projects/{project}/datasets/{dataset}/tables/{table}"]
};


service BigQueryRead {
	option (google.api.default_host) = "bigquerystorage.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/bigquery,https://www.googleapis.com/auth/bigquery.readonly,https://www.googleapis.com/auth/cloud-platform";

	rpc CreateReadSession(google.cloud.bigquery.storage.v1.CreateReadSessionRequest) returns (google.cloud.bigquery.storage.v1.ReadSession) {
		option (google.api.method_signature) = "parent,read_session,max_stream_count";
		option (google.api.http) = {
			post: "/v1/{read_session.table=projects/*/datasets/*/tables/*}"
			body: "*"
		};

	}
	rpc ReadRows(google.cloud.bigquery.storage.v1.ReadRowsRequest) returns (stream google.cloud.bigquery.storage.v1.ReadRowsResponse) {
		option (google.api.method_signature) = "read_stream,offset";
		option (google.api.http) = {
			get: "/v1/{read_stream=projects/*/locations/*/sessions/*/streams/*}"
		};

	}
	rpc SplitReadStream(google.cloud.bigquery.storage.v1.SplitReadStreamRequest) returns (google.cloud.bigquery.storage.v1.SplitReadStreamResponse) {
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/sessions/*/streams/*}"
		};

	}
}

message CreateReadSessionRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Project"
		}
	];
	google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	int32 max_stream_count = 3;
}

message ReadRowsRequest {

	string read_stream = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "bigquerystorage.googleapis.com/ReadStream"
		}
	];
	int64 offset = 2;
}

message ThrottleState {

	int32 throttle_percent = 1;
}

message StreamStats {

	message Progress {

		double at_response_start = 1;
		double at_response_end = 2;
	}

	Progress progress = 2;
}

message ReadRowsResponse {

	oneof rows {
		google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
		google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
	}
	int64 row_count = 6;
	StreamStats stats = 2;
	ThrottleState throttle_state = 5;
}

message SplitReadStreamRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "bigquerystorage.googleapis.com/ReadStream"
		}
	];
	double fraction = 2;
}

message SplitReadStreamResponse {

	google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
	google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
}
