syntax = "proto3";

package google.cloud.bigquery.storage.v1beta1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/cloud/bigquery/storage/v1beta1/arrow.proto";
import "google/cloud/bigquery/storage/v1beta1/avro.proto";
import "google/cloud/bigquery/storage/v1beta1/read_options.proto";
import "google/cloud/bigquery/storage/v1beta1/table_reference.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.cloud.bigquery.storage.v1beta1";
option go_package = "google.golang.org/genproto/googleapis/cloud/bigquery/storage/v1beta1;storage";


enum DataFormat {

	DATA_FORMAT_UNSPECIFIED = 0;
	AVRO = 1;
	ARROW = 3;
}

enum ShardingStrategy {

	SHARDING_STRATEGY_UNSPECIFIED = 0;
	LIQUID = 1;
	BALANCED = 2;
}

service BigQueryStorage {
	option (google.api.default_host) = "bigquerystorage.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/bigquery,https://www.googleapis.com/auth/bigquery.readonly,https://www.googleapis.com/auth/cloud-platform";

	rpc CreateReadSession(google.cloud.bigquery.storage.v1beta1.CreateReadSessionRequest) returns (google.cloud.bigquery.storage.v1beta1.ReadSession) {
		option (google.api.method_signature) = "table_reference,parent,requested_streams";
		option (google.api.http) = {
			post: "/v1beta1/{table_reference.project_id=projects/*}"
			body: "*"
			additional_bindings: {
				post: "/v1beta1/{table_reference.dataset_id=projects/*/datasets/*}"
				body: "*"
			}
		};

	}
	rpc ReadRows(google.cloud.bigquery.storage.v1beta1.ReadRowsRequest) returns (stream google.cloud.bigquery.storage.v1beta1.ReadRowsResponse) {
		option (google.api.method_signature) = "read_position";
		option (google.api.http) = {
			get: "/v1beta1/{read_position.stream.name=projects/*/streams/*}"
		};

	}
	rpc BatchCreateReadSessionStreams(google.cloud.bigquery.storage.v1beta1.BatchCreateReadSessionStreamsRequest) returns (google.cloud.bigquery.storage.v1beta1.BatchCreateReadSessionStreamsResponse) {
		option (google.api.method_signature) = "session,requested_streams";
		option (google.api.http) = {
			post: "/v1beta1/{session.name=projects/*/sessions/*}"
			body: "*"
		};

	}
	rpc FinalizeStream(google.cloud.bigquery.storage.v1beta1.FinalizeStreamRequest) returns (google.protobuf.Empty) {
		option (google.api.method_signature) = "stream";
		option (google.api.http) = {
			post: "/v1beta1/{stream.name=projects/*/streams/*}"
			body: "*"
		};

	}
	rpc SplitReadStream(google.cloud.bigquery.storage.v1beta1.SplitReadStreamRequest) returns (google.cloud.bigquery.storage.v1beta1.SplitReadStreamResponse) {
		option (google.api.method_signature) = "original_stream";
		option (google.api.http) = {
			get: "/v1beta1/{original_stream.name=projects/*/streams/*}"
		};

	}
}

message Stream {
	option (google.api.resource) = {
		type: "bigquerystorage.googleapis.com/Stream"
		pattern: ["projects/{project}/locations/{location}/streams/{stream}"]
	};

	string name = 1;
}

message StreamPosition {

	Stream stream = 1;
	int64 offset = 2;
}

message ReadSession {
	option (google.api.resource) = {
		type: "bigquerystorage.googleapis.com/ReadSession"
		pattern: ["projects/{project}/locations/{location}/sessions/{session}"]
	};

	string name = 1;
	google.protobuf.Timestamp expire_time = 2;
	oneof schema {
		google.cloud.bigquery.storage.v1beta1.AvroSchema avro_schema = 5;
		google.cloud.bigquery.storage.v1beta1.ArrowSchema arrow_schema = 6;
	}
	repeated Stream streams = 4;
	google.cloud.bigquery.storage.v1beta1.TableReference table_reference = 7;
	google.cloud.bigquery.storage.v1beta1.TableModifiers table_modifiers = 8;
	ShardingStrategy sharding_strategy = 9;
}

message CreateReadSessionRequest {

	google.cloud.bigquery.storage.v1beta1.TableReference table_reference = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string parent = 6 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Project"
		}
	];
	google.cloud.bigquery.storage.v1beta1.TableModifiers table_modifiers = 2;
	int32 requested_streams = 3;
	google.cloud.bigquery.storage.v1beta1.TableReadOptions read_options = 4;
	DataFormat format = 5;
	ShardingStrategy sharding_strategy = 7;
}

message ReadRowsRequest {

	StreamPosition read_position = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message StreamStatus {

	int64 estimated_row_count = 1;
	float fraction_consumed = 2;
	Progress progress = 4;
	bool is_splittable = 3;
}

message Progress {

	float at_response_start = 1;
	float at_response_end = 2;
}

message ThrottleStatus {

	int32 throttle_percent = 1;
}

message ReadRowsResponse {

	oneof rows {
		google.cloud.bigquery.storage.v1beta1.AvroRows avro_rows = 3;
		google.cloud.bigquery.storage.v1beta1.ArrowRecordBatch arrow_record_batch = 4;
	}
	int64 row_count = 6;
	StreamStatus status = 2;
	ThrottleStatus throttle_status = 5;
}

message BatchCreateReadSessionStreamsRequest {

	ReadSession session = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	int32 requested_streams = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message BatchCreateReadSessionStreamsResponse {

	repeated Stream streams = 1;
}

message FinalizeStreamRequest {

	Stream stream = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message SplitReadStreamRequest {

	Stream original_stream = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	float fraction = 2;
}

message SplitReadStreamResponse {

	Stream primary_stream = 1;
	Stream remainder_stream = 2;
}
