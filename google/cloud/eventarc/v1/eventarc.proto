syntax = "proto3";

package google.cloud.eventarc.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/cloud/eventarc/v1/trigger.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.cloud.eventarc.v1";
option java_outer_classname = "EventarcProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/eventarc/v1;eventarc";
option csharp_namespace = "Google.Cloud.Eventarc.V1";
option php_namespace = "Google\\Cloud\\Eventarc\\V1";
option ruby_package = "Google::Cloud::Eventarc::V1";


service Eventarc {
	option (google.api.default_host) = "eventarc.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc GetTrigger(google.cloud.eventarc.v1.GetTriggerRequest) returns (google.cloud.eventarc.v1.Trigger) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/triggers/*}"
		};

	}
	rpc ListTriggers(google.cloud.eventarc.v1.ListTriggersRequest) returns (google.cloud.eventarc.v1.ListTriggersResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/triggers"
		};

	}
	rpc CreateTrigger(google.cloud.eventarc.v1.CreateTriggerRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Trigger"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,trigger,trigger_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/triggers"
			body: "trigger"
		};

	}
	rpc UpdateTrigger(google.cloud.eventarc.v1.UpdateTriggerRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Trigger"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "trigger,update_mask,allow_missing";
		option (google.api.http) = {
			patch: "/v1/{trigger.name=projects/*/locations/*/triggers/*}"
			body: "trigger"
		};

	}
	rpc DeleteTrigger(google.cloud.eventarc.v1.DeleteTriggerRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Trigger"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name,allow_missing";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/triggers/*}"
		};

	}
}

message GetTriggerRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "eventarc.googleapis.com/Trigger"
		}
	];
}

message ListTriggersRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "eventarc.googleapis.com/Trigger"
		}
	];
	int32 page_size = 2;
	string page_token = 3;
	string order_by = 4;
}

message ListTriggersResponse {

	repeated google.cloud.eventarc.v1.Trigger triggers = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message CreateTriggerRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "eventarc.googleapis.com/Trigger"
		}
	];
	google.cloud.eventarc.v1.Trigger trigger = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	string trigger_id = 3 [
		(google.api.field_behavior) = REQUIRED
	];
	bool validate_only = 4 [
		(google.api.field_behavior) = REQUIRED
	];
}

message UpdateTriggerRequest {

	google.cloud.eventarc.v1.Trigger trigger = 1;
	google.protobuf.FieldMask update_mask = 2;
	bool allow_missing = 3;
	bool validate_only = 4 [
		(google.api.field_behavior) = REQUIRED
	];
}

message DeleteTriggerRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "eventarc.googleapis.com/Trigger"
		}
	];
	string etag = 2;
	bool allow_missing = 3;
	bool validate_only = 4 [
		(google.api.field_behavior) = REQUIRED
	];
}

message OperationMetadata {

	google.protobuf.Timestamp create_time = 1 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp end_time = 2 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string target = 3 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string verb = 4 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string status_message = 5 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	bool requested_cancellation = 6 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string api_version = 7 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}
