syntax = "proto3";

package google.cloud.aiplatform.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/cloud/aiplatform/v1/io.proto";
import "google/cloud/aiplatform/v1/model.proto";
import "google/cloud/aiplatform/v1/model_evaluation.proto";
import "google/cloud/aiplatform/v1/model_evaluation_slice.proto";
import "google/cloud/aiplatform/v1/operation.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";

option java_package = "com.google.cloud.aiplatform.v1";
option java_outer_classname = "ModelServiceProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/aiplatform/v1;aiplatform";
option csharp_namespace = "Google.Cloud.AIPlatform.V1";
option php_namespace = "Google\\Cloud\\AIPlatform\\V1";
option ruby_package = "Google::Cloud::AIPlatform::V1";


service ModelService {
	option (google.api.default_host) = "aiplatform.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc UploadModel(google.cloud.aiplatform.v1.UploadModelRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "UploadModelResponse"
			metadata_type: "UploadModelOperationMetadata"
		};
		option (google.api.method_signature) = "parent,model";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/models:upload"
			body: "*"
		};

	}
	rpc GetModel(google.cloud.aiplatform.v1.GetModelRequest) returns (google.cloud.aiplatform.v1.Model) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/models/*}"
		};

	}
	rpc ListModels(google.cloud.aiplatform.v1.ListModelsRequest) returns (google.cloud.aiplatform.v1.ListModelsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/models"
		};

	}
	rpc UpdateModel(google.cloud.aiplatform.v1.UpdateModelRequest) returns (google.cloud.aiplatform.v1.Model) {
		option (google.api.method_signature) = "model,update_mask";
		option (google.api.http) = {
			patch: "/v1/{model.name=projects/*/locations/*/models/*}"
			body: "model"
		};

	}
	rpc DeleteModel(google.cloud.aiplatform.v1.DeleteModelRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "DeleteOperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/models/*}"
		};

	}
	rpc ExportModel(google.cloud.aiplatform.v1.ExportModelRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "ExportModelResponse"
			metadata_type: "ExportModelOperationMetadata"
		};
		option (google.api.method_signature) = "name,output_config";
		option (google.api.http) = {
			post: "/v1/{name=projects/*/locations/*/models/*}:export"
			body: "*"
		};

	}
	rpc GetModelEvaluation(google.cloud.aiplatform.v1.GetModelEvaluationRequest) returns (google.cloud.aiplatform.v1.ModelEvaluation) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/models/*/evaluations/*}"
		};

	}
	rpc ListModelEvaluations(google.cloud.aiplatform.v1.ListModelEvaluationsRequest) returns (google.cloud.aiplatform.v1.ListModelEvaluationsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*/models/*}/evaluations"
		};

	}
	rpc GetModelEvaluationSlice(google.cloud.aiplatform.v1.GetModelEvaluationSliceRequest) returns (google.cloud.aiplatform.v1.ModelEvaluationSlice) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/models/*/evaluations/*/slices/*}"
		};

	}
	rpc ListModelEvaluationSlices(google.cloud.aiplatform.v1.ListModelEvaluationSlicesRequest) returns (google.cloud.aiplatform.v1.ListModelEvaluationSlicesResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*/models/*/evaluations/*}/slices"
		};

	}
}

message UploadModelRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "locations.googleapis.com/Location"
		}
	];
	google.cloud.aiplatform.v1.Model model = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message UploadModelOperationMetadata {

	google.cloud.aiplatform.v1.GenericOperationMetadata generic_metadata = 1;
}

message UploadModelResponse {

	string model = 1 [
		(google.api.resource_reference) = {
			type: "aiplatform.googleapis.com/Model"
		}
	];
}

message GetModelRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "aiplatform.googleapis.com/Model"
		}
	];
}

message ListModelsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "locations.googleapis.com/Location"
		}
	];
	string filter = 2;
	int32 page_size = 3;
	string page_token = 4;
	google.protobuf.FieldMask read_mask = 5;
	string order_by = 6;
}

message ListModelsResponse {

	repeated google.cloud.aiplatform.v1.Model models = 1;
	string next_page_token = 2;
}

message UpdateModelRequest {

	google.cloud.aiplatform.v1.Model model = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.protobuf.FieldMask update_mask = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message DeleteModelRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "aiplatform.googleapis.com/Model"
		}
	];
}

message ExportModelRequest {

	message OutputConfig {

		string export_format_id = 1;
		google.cloud.aiplatform.v1.GcsDestination artifact_destination = 3;
		google.cloud.aiplatform.v1.ContainerRegistryDestination image_destination = 4;
	}

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "aiplatform.googleapis.com/Model"
		}
	];
	OutputConfig output_config = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message ExportModelOperationMetadata {

	message OutputInfo {

		string artifact_output_uri = 2 [
			(google.api.field_behavior) = OUTPUT_ONLY
		];
		string image_output_uri = 3 [
			(google.api.field_behavior) = OUTPUT_ONLY
		];
	}

	google.cloud.aiplatform.v1.GenericOperationMetadata generic_metadata = 1;
	OutputInfo output_info = 2 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message ExportModelResponse {

}

message GetModelEvaluationRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "aiplatform.googleapis.com/ModelEvaluation"
		}
	];
}

message ListModelEvaluationsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "aiplatform.googleapis.com/Model"
		}
	];
	string filter = 2;
	int32 page_size = 3;
	string page_token = 4;
	google.protobuf.FieldMask read_mask = 5;
}

message ListModelEvaluationsResponse {

	repeated google.cloud.aiplatform.v1.ModelEvaluation model_evaluations = 1;
	string next_page_token = 2;
}

message GetModelEvaluationSliceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "aiplatform.googleapis.com/ModelEvaluationSlice"
		}
	];
}

message ListModelEvaluationSlicesRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "aiplatform.googleapis.com/ModelEvaluation"
		}
	];
	string filter = 2;
	int32 page_size = 3;
	string page_token = 4;
	google.protobuf.FieldMask read_mask = 5;
}

message ListModelEvaluationSlicesResponse {

	repeated google.cloud.aiplatform.v1.ModelEvaluationSlice model_evaluation_slices = 1;
	string next_page_token = 2;
}
