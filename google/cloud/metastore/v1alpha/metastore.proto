syntax = "proto3";

package google.cloud.metastore.v1alpha;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.cloud.metastore.v1alpha";
option java_outer_classname = "MetastoreProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/metastore/v1alpha;metastore";
option (google.api.resource_definition) = {
	type: "compute.googleapis.com/Network"
	pattern: ["projects/{project}/global/networks/{network}"]
};


service DataprocMetastore {
	option (google.api.default_host) = "metastore.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc ListServices(google.cloud.metastore.v1alpha.ListServicesRequest) returns (google.cloud.metastore.v1alpha.ListServicesResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1alpha/{parent=projects/*/locations/*}/services"
		};

	}
	rpc GetService(google.cloud.metastore.v1alpha.GetServiceRequest) returns (google.cloud.metastore.v1alpha.Service) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1alpha/{name=projects/*/locations/*/services/*}"
		};

	}
	rpc CreateService(google.cloud.metastore.v1alpha.CreateServiceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Service"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,service,service_id";
		option (google.api.http) = {
			post: "/v1alpha/{parent=projects/*/locations/*}/services"
			body: "service"
		};

	}
	rpc UpdateService(google.cloud.metastore.v1alpha.UpdateServiceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Service"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "service,update_mask";
		option (google.api.http) = {
			patch: "/v1alpha/{service.name=projects/*/locations/*/services/*}"
			body: "service"
		};

	}
	rpc DeleteService(google.cloud.metastore.v1alpha.DeleteServiceRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1alpha/{name=projects/*/locations/*/services/*}"
		};

	}
	rpc ListMetadataImports(google.cloud.metastore.v1alpha.ListMetadataImportsRequest) returns (google.cloud.metastore.v1alpha.ListMetadataImportsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1alpha/{parent=projects/*/locations/*/services/*}/metadataImports"
		};

	}
	rpc GetMetadataImport(google.cloud.metastore.v1alpha.GetMetadataImportRequest) returns (google.cloud.metastore.v1alpha.MetadataImport) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1alpha/{name=projects/*/locations/*/services/*/metadataImports/*}"
		};

	}
	rpc CreateMetadataImport(google.cloud.metastore.v1alpha.CreateMetadataImportRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "MetadataImport"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,metadata_import,metadata_import_id";
		option (google.api.http) = {
			post: "/v1alpha/{parent=projects/*/locations/*/services/*}/metadataImports"
			body: "metadata_import"
		};

	}
	rpc UpdateMetadataImport(google.cloud.metastore.v1alpha.UpdateMetadataImportRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "MetadataImport"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "metadata_import,update_mask";
		option (google.api.http) = {
			patch: "/v1alpha/{metadata_import.name=projects/*/locations/*/services/*/metadataImports/*}"
			body: "metadata_import"
		};

	}
}

message Service {
	option (google.api.resource) = {
		type: "metastore.googleapis.com/Service"
		pattern: ["projects/{project}/locations/{location}/services/{service}"]
	};

	enum State {

		STATE_UNSPECIFIED = 0;
		CREATING = 1;
		ACTIVE = 2;
		SUSPENDING = 3;
		SUSPENDED = 4;
		UPDATING = 5;
		DELETING = 6;
		ERROR = 7;
	}

	enum Tier {

		TIER_UNSPECIFIED = 0;
		ENTERPRISE = 3;
	}

	string name = 1 [
		(google.api.field_behavior) = IMMUTABLE
	];
	google.protobuf.Timestamp create_time = 2 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp update_time = 3 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	map<string, string> labels = 4;
	oneof metastore_config {
		HiveMetastoreConfig hive_metastore_config = 5;
	}
	string network = 7 [
		(google.api.field_behavior) = IMMUTABLE
		(google.api.resource_reference) = {
			type: "compute.googleapis.com/Network"
		}
	];
	string endpoint_uri = 8 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	int32 port = 9;
	State state = 10 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string state_message = 11 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string artifact_gcs_uri = 12 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	Tier tier = 13;
}

message HiveMetastoreConfig {

	string version = 1 [
		(google.api.field_behavior) = IMMUTABLE
	];
	map<string, string> config_overrides = 2;
	KerberosConfig kerberos_config = 3;
}

message KerberosConfig {

	Secret keytab = 1;
	string principal = 2;
	string krb5_config_gcs_uri = 3;
}

message Secret {

	oneof value {
		string cloud_secret = 2;
	}
}

message MetadataImport {
	option (google.api.resource) = {
		type: "metastore.googleapis.com/MetadataImport"
		pattern: ["projects/{project}/locations/{location}/services/{service}/metadataImports/{metadata_import}"]
	};

	message DatabaseDump {

		enum DatabaseType {

			DATABASE_TYPE_UNSPECIFIED = 0;
			MYSQL = 1;
		}

		DatabaseType database_type = 1;
		string gcs_uri = 2;
		string source_database = 3;
	}

	enum State {

		STATE_UNSPECIFIED = 0;
		RUNNING = 1;
		SUCCEEDED = 2;
		UPDATING = 3;
		FAILED = 4;
	}

	string name = 1 [
		(google.api.field_behavior) = IMMUTABLE
	];
	string description = 2;
	google.protobuf.Timestamp create_time = 3 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp update_time = 4 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	State state = 5 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	oneof metadata {
		DatabaseDump database_dump = 6 [
			(google.api.field_behavior) = IMMUTABLE
		];
	}
}

message ListServicesRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "locations.googleapis.com/Location"
		}
	];
	int32 page_size = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	string filter = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
	string order_by = 5 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message ListServicesResponse {

	repeated Service services = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message GetServiceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "metastore.googleapis.com/Service"
		}
	];
}

message CreateServiceRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "locations.googleapis.com/Location"
		}
	];
	string service_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	Service service = 3 [
		(google.api.field_behavior) = REQUIRED
	];
	string request_id = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message UpdateServiceRequest {

	google.protobuf.FieldMask update_mask = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	Service service = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	string request_id = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message DeleteServiceRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "metastore.googleapis.com/Service"
		}
	];
	string request_id = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message ListMetadataImportsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "metastore.googleapis.com/Service"
		}
	];
	int32 page_size = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	string filter = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
	string order_by = 5 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message ListMetadataImportsResponse {

	repeated MetadataImport metadata_imports = 1;
	string next_page_token = 2;
	repeated string unreachable = 3;
}

message GetMetadataImportRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "metastore.googleapis.com/MetadataImport"
		}
	];
}

message CreateMetadataImportRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "metastore.googleapis.com/Service"
		}
	];
	string metadata_import_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	MetadataImport metadata_import = 3 [
		(google.api.field_behavior) = REQUIRED
	];
	string request_id = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message UpdateMetadataImportRequest {

	google.protobuf.FieldMask update_mask = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	MetadataImport metadata_import = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	string request_id = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message OperationMetadata {

	google.protobuf.Timestamp create_time = 1 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp end_time = 2 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string target = 3 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string verb = 4 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string status_message = 5 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	bool requested_cancellation = 6 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string api_version = 7 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message LocationMetadata {

	message HiveMetastoreVersion {

		string version = 1;
		bool is_default = 2;
	}

	repeated HiveMetastoreVersion supported_hive_metastore_versions = 1;
}
