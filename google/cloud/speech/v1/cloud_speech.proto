syntax = "proto3";

package google.cloud.speech.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";

option java_package = "com.google.cloud.speech.v1";
option java_outer_classname = "SpeechProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/speech/v1;speech";
option cc_enable_arenas = true;
option objc_class_prefix = "GCS";


service Speech {
	option (google.api.default_host) = "speech.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc Recognize(google.cloud.speech.v1.RecognizeRequest) returns (google.cloud.speech.v1.RecognizeResponse) {
		option (google.api.method_signature) = "config,audio";
		option (google.api.http) = {
			post: "/v1/speech:recognize"
			body: "*"
		};

	}
	rpc LongRunningRecognize(google.cloud.speech.v1.LongRunningRecognizeRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "LongRunningRecognizeResponse"
			metadata_type: "LongRunningRecognizeMetadata"
		};
		option (google.api.method_signature) = "config,audio";
		option (google.api.http) = {
			post: "/v1/speech:longrunningrecognize"
			body: "*"
		};

	}
	rpc StreamingRecognize(stream google.cloud.speech.v1.StreamingRecognizeRequest) returns (stream google.cloud.speech.v1.StreamingRecognizeResponse) {}
}

message RecognizeRequest {

	RecognitionConfig config = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	RecognitionAudio audio = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message LongRunningRecognizeRequest {

	RecognitionConfig config = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	RecognitionAudio audio = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	TranscriptOutputConfig output_config = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message TranscriptOutputConfig {

	oneof output_type {
		string gcs_uri = 1;
	}
}

message StreamingRecognizeRequest {

	oneof streaming_request {
		StreamingRecognitionConfig streaming_config = 1;
		bytes audio_content = 2;
	}
}

message StreamingRecognitionConfig {

	RecognitionConfig config = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	bool single_utterance = 2;
	bool interim_results = 3;
}

message RecognitionConfig {

	enum AudioEncoding {

		ENCODING_UNSPECIFIED = 0;
		LINEAR16 = 1;
		FLAC = 2;
		MULAW = 3;
		AMR = 4;
		AMR_WB = 5;
		OGG_OPUS = 6;
		SPEEX_WITH_HEADER_BYTE = 7;
	}

	AudioEncoding encoding = 1;
	int32 sample_rate_hertz = 2;
	int32 audio_channel_count = 7;
	bool enable_separate_recognition_per_channel = 12;
	string language_code = 3 [
		(google.api.field_behavior) = REQUIRED
	];
	int32 max_alternatives = 4;
	bool profanity_filter = 5;
	repeated SpeechContext speech_contexts = 6;
	bool enable_word_time_offsets = 8;
	bool enable_automatic_punctuation = 11;
	SpeakerDiarizationConfig diarization_config = 19;
	RecognitionMetadata metadata = 9;
	string model = 13;
	bool use_enhanced = 14;
}

message SpeakerDiarizationConfig {

	bool enable_speaker_diarization = 1;
	int32 min_speaker_count = 2;
	int32 max_speaker_count = 3;
	int32 speaker_tag = 5 [
		deprecated = true,
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message RecognitionMetadata {

	enum InteractionType {

		INTERACTION_TYPE_UNSPECIFIED = 0;
		DISCUSSION = 1;
		PRESENTATION = 2;
		PHONE_CALL = 3;
		VOICEMAIL = 4;
		PROFESSIONALLY_PRODUCED = 5;
		VOICE_SEARCH = 6;
		VOICE_COMMAND = 7;
		DICTATION = 8;
	}

	enum MicrophoneDistance {

		MICROPHONE_DISTANCE_UNSPECIFIED = 0;
		NEARFIELD = 1;
		MIDFIELD = 2;
		FARFIELD = 3;
	}

	enum OriginalMediaType {

		ORIGINAL_MEDIA_TYPE_UNSPECIFIED = 0;
		AUDIO = 1;
		VIDEO = 2;
	}

	enum RecordingDeviceType {

		RECORDING_DEVICE_TYPE_UNSPECIFIED = 0;
		SMARTPHONE = 1;
		PC = 2;
		PHONE_LINE = 3;
		VEHICLE = 4;
		OTHER_OUTDOOR_DEVICE = 5;
		OTHER_INDOOR_DEVICE = 6;
	}

	InteractionType interaction_type = 1;
	uint32 industry_naics_code_of_audio = 3;
	MicrophoneDistance microphone_distance = 4;
	OriginalMediaType original_media_type = 5;
	RecordingDeviceType recording_device_type = 6;
	string recording_device_name = 7;
	string original_mime_type = 8;
	string audio_topic = 10;
}

message SpeechContext {

	repeated string phrases = 1;
}

message RecognitionAudio {

	oneof audio_source {
		bytes content = 1;
		string uri = 2;
	}
}

message RecognizeResponse {

	repeated SpeechRecognitionResult results = 2;
	google.protobuf.Duration total_billed_time = 3;
}

message LongRunningRecognizeResponse {

	repeated SpeechRecognitionResult results = 2;
	google.protobuf.Duration total_billed_time = 3;
}

message LongRunningRecognizeMetadata {

	int32 progress_percent = 1;
	google.protobuf.Timestamp start_time = 2;
	google.protobuf.Timestamp last_update_time = 3;
	string uri = 4 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message StreamingRecognizeResponse {

	enum SpeechEventType {

		SPEECH_EVENT_UNSPECIFIED = 0;
		END_OF_SINGLE_UTTERANCE = 1;
	}

	google.rpc.Status error = 1;
	repeated StreamingRecognitionResult results = 2;
	SpeechEventType speech_event_type = 4;
	google.protobuf.Duration total_billed_time = 5;
}

message StreamingRecognitionResult {

	repeated SpeechRecognitionAlternative alternatives = 1;
	bool is_final = 2;
	float stability = 3;
	google.protobuf.Duration result_end_time = 4;
	int32 channel_tag = 5;
	string language_code = 6 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message SpeechRecognitionResult {

	repeated SpeechRecognitionAlternative alternatives = 1;
	int32 channel_tag = 2;
}

message SpeechRecognitionAlternative {

	string transcript = 1;
	float confidence = 2;
	repeated WordInfo words = 3;
}

message WordInfo {

	google.protobuf.Duration start_time = 1;
	google.protobuf.Duration end_time = 2;
	string word = 3;
	int32 speaker_tag = 5 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}
