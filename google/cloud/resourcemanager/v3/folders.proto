syntax = "proto3";

package google.cloud.resourcemanager.v3;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.cloud.resourcemanager.v3";
option java_outer_classname = "FoldersProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/resourcemanager/v3;resourcemanager";
option csharp_namespace = "Google.Cloud.ResourceManager.V3";
option php_namespace = "Google\\Cloud\\ResourceManager\\V3";
option ruby_package = "Google::Cloud::ResourceManager::V3";


service Folders {
	option (google.api.default_host) = "cloudresourcemanager.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platform.read-only";

	rpc GetFolder(google.cloud.resourcemanager.v3.GetFolderRequest) returns (google.cloud.resourcemanager.v3.Folder) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v3/{name=folders/*}"
		};

	}
	rpc ListFolders(google.cloud.resourcemanager.v3.ListFoldersRequest) returns (google.cloud.resourcemanager.v3.ListFoldersResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v3/folders"
		};

	}
	rpc SearchFolders(google.cloud.resourcemanager.v3.SearchFoldersRequest) returns (google.cloud.resourcemanager.v3.SearchFoldersResponse) {
		option (google.api.method_signature) = "query";
		option (google.api.http) = {
			get: "/v3/folders:search"
		};

	}
	rpc CreateFolder(google.cloud.resourcemanager.v3.CreateFolderRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Folder"
			metadata_type: "CreateFolderMetadata"
		};
		option (google.api.method_signature) = "folder";
		option (google.api.http) = {
			post: "/v3/folders"
			body: "folder"
		};

	}
	rpc UpdateFolder(google.cloud.resourcemanager.v3.UpdateFolderRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Folder"
			metadata_type: "UpdateFolderMetadata"
		};
		option (google.api.method_signature) = "folder,update_mask";
		option (google.api.http) = {
			patch: "/v3/{folder.name=folders/*}"
			body: "folder"
		};

	}
	rpc MoveFolder(google.cloud.resourcemanager.v3.MoveFolderRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Folder"
			metadata_type: "MoveFolderMetadata"
		};
		option (google.api.method_signature) = "name,destination_parent";
		option (google.api.http) = {
			post: "/v3/{name=folders/*}:move"
			body: "*"
		};

	}
	rpc DeleteFolder(google.cloud.resourcemanager.v3.DeleteFolderRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Folder"
			metadata_type: "DeleteFolderMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v3/{name=folders/*}"
		};

	}
	rpc UndeleteFolder(google.cloud.resourcemanager.v3.UndeleteFolderRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Folder"
			metadata_type: "UndeleteFolderMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			post: "/v3/{name=folders/*}:undelete"
			body: "*"
		};

	}
	rpc GetIamPolicy(google.iam.v1.GetIamPolicyRequest) returns (google.iam.v1.Policy) {
		option (google.api.method_signature) = "resource";
		option (google.api.http) = {
			post: "/v3/{resource=folders/*}:getIamPolicy"
			body: "*"
		};

	}
	rpc SetIamPolicy(google.iam.v1.SetIamPolicyRequest) returns (google.iam.v1.Policy) {
		option (google.api.method_signature) = "resource,policy";
		option (google.api.http) = {
			post: "/v3/{resource=folders/*}:setIamPolicy"
			body: "*"
		};

	}
	rpc TestIamPermissions(google.iam.v1.TestIamPermissionsRequest) returns (google.iam.v1.TestIamPermissionsResponse) {
		option (google.api.method_signature) = "resource,permissions";
		option (google.api.http) = {
			post: "/v3/{resource=folders/*}:testIamPermissions"
			body: "*"
		};

	}
}

message Folder {
	option (google.api.resource) = {
		type: "cloudresourcemanager.googleapis.com/Folder"
		pattern: ["folders/{folder}"]
		style: [DECLARATIVE_FRIENDLY]
	};

	enum State {

		STATE_UNSPECIFIED = 0;
		ACTIVE = 1;
		DELETE_REQUESTED = 2;
	}

	string name = 1 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string parent = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	string display_name = 3;
	State state = 4 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp create_time = 5 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp update_time = 6 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp delete_time = 7 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string etag = 8 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message GetFolderRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Folder"
		}
	];
}

message ListFoldersRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "*"
		}
	];
	int32 page_size = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	bool show_deleted = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message ListFoldersResponse {

	repeated Folder folders = 1;
	string next_page_token = 2;
}

message SearchFoldersRequest {

	int32 page_size = 1 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string query = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message SearchFoldersResponse {

	repeated Folder folders = 1;
	string next_page_token = 2;
}

message CreateFolderRequest {

	Folder folder = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message CreateFolderMetadata {

	string display_name = 1;
	string parent = 2;
}

message UpdateFolderRequest {

	Folder folder = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.protobuf.FieldMask update_mask = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message UpdateFolderMetadata {

}

message MoveFolderRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Folder"
		}
	];
	string destination_parent = 2 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "*"
		}
	];
}

message MoveFolderMetadata {

	string display_name = 1;
	string source_parent = 2;
	string destination_parent = 3;
}

message DeleteFolderRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Folder"
		}
	];
}

message DeleteFolderMetadata {

}

message UndeleteFolderRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Folder"
		}
	];
}

message UndeleteFolderMetadata {

}
