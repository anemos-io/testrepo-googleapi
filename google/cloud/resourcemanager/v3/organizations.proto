syntax = "proto3";

package google.cloud.resourcemanager.v3;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.cloud.resourcemanager.v3";
option java_outer_classname = "OrganizationsProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/resourcemanager/v3;resourcemanager";
option csharp_namespace = "Google.Cloud.ResourceManager.V3";
option php_namespace = "Google\\Cloud\\ResourceManager\\V3";
option ruby_package = "Google::Cloud::ResourceManager::V3";


service Organizations {
	option (google.api.default_host) = "cloudresourcemanager.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platform.read-only";

	rpc GetOrganization(google.cloud.resourcemanager.v3.GetOrganizationRequest) returns (google.cloud.resourcemanager.v3.Organization) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v3/{name=organizations/*}"
		};

	}
	rpc SearchOrganizations(google.cloud.resourcemanager.v3.SearchOrganizationsRequest) returns (google.cloud.resourcemanager.v3.SearchOrganizationsResponse) {
		option (google.api.method_signature) = "query";
		option (google.api.http) = {
			get: "/v3/organizations:search"
		};

	}
	rpc GetIamPolicy(google.iam.v1.GetIamPolicyRequest) returns (google.iam.v1.Policy) {
		option (google.api.method_signature) = "resource";
		option (google.api.http) = {
			post: "/v3/{resource=organizations/*}:getIamPolicy"
			body: "*"
		};

	}
	rpc SetIamPolicy(google.iam.v1.SetIamPolicyRequest) returns (google.iam.v1.Policy) {
		option (google.api.method_signature) = "resource";
		option (google.api.http) = {
			post: "/v3/{resource=organizations/*}:setIamPolicy"
			body: "*"
		};

	}
	rpc TestIamPermissions(google.iam.v1.TestIamPermissionsRequest) returns (google.iam.v1.TestIamPermissionsResponse) {
		option (google.api.method_signature) = "resource,permissions";
		option (google.api.http) = {
			post: "/v3/{resource=organizations/*}:testIamPermissions"
			body: "*"
		};

	}
}

message Organization {
	option (google.api.resource) = {
		type: "cloudresourcemanager.googleapis.com/Organization"
		pattern: ["organizations/{organization}"]
		style: [DECLARATIVE_FRIENDLY]
	};

	enum State {

		STATE_UNSPECIFIED = 0;
		ACTIVE = 1;
		DELETE_REQUESTED = 2;
	}

	string name = 1 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string display_name = 2 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	oneof owner {
		string directory_customer_id = 3 [
			(google.api.field_behavior) = IMMUTABLE
		];
	}
	State state = 4 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp create_time = 5 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp update_time = 6 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp delete_time = 7 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string etag = 8 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message GetOrganizationRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Organization"
		}
	];
}

message SearchOrganizationsRequest {

	int32 page_size = 1 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string query = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message SearchOrganizationsResponse {

	repeated Organization organizations = 1;
	string next_page_token = 2;
}

message DeleteOrganizationMetadata {

}

message UndeleteOrganizationMetadata {

}
