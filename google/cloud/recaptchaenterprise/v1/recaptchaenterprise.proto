syntax = "proto3";

package google.cloud.recaptchaenterprise.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.recaptchaenterprise.v1";
option java_outer_classname = "RecaptchaEnterpriseProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/recaptchaenterprise/v1;recaptchaenterprise";
option objc_class_prefix = "GCRE";
option csharp_namespace = "Google.Cloud.RecaptchaEnterprise.V1";
option php_namespace = "Google\\Cloud\\RecaptchaEnterprise\\V1";
option ruby_package = "Google::Cloud::RecaptchaEnterprise::V1";


service RecaptchaEnterpriseService {
	option (google.api.default_host) = "recaptchaenterprise.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc CreateAssessment(google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest) returns (google.cloud.recaptchaenterprise.v1.Assessment) {
		option (google.api.method_signature) = "parent,assessment";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*}/assessments"
			body: "assessment"
		};

	}
	rpc AnnotateAssessment(google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest) returns (google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse) {
		option (google.api.method_signature) = "name,annotation";
		option (google.api.http) = {
			post: "/v1/{name=projects/*/assessments/*}:annotate"
			body: "*"
		};

	}
	rpc CreateKey(google.cloud.recaptchaenterprise.v1.CreateKeyRequest) returns (google.cloud.recaptchaenterprise.v1.Key) {
		option (google.api.http) = {
			post: "/v1/{parent=projects/*}/keys"
			body: "key"
		};

	}
	rpc ListKeys(google.cloud.recaptchaenterprise.v1.ListKeysRequest) returns (google.cloud.recaptchaenterprise.v1.ListKeysResponse) {
		option (google.api.http) = {
			get: "/v1/{parent=projects/*}/keys"
		};

	}
	rpc GetKey(google.cloud.recaptchaenterprise.v1.GetKeyRequest) returns (google.cloud.recaptchaenterprise.v1.Key) {
		option (google.api.http) = {
			get: "/v1/{name=projects/*/keys/*}"
		};

	}
	rpc UpdateKey(google.cloud.recaptchaenterprise.v1.UpdateKeyRequest) returns (google.cloud.recaptchaenterprise.v1.Key) {
		option (google.api.http) = {
			patch: "/v1/{key.name=projects/*/keys/*}"
			body: "key"
		};

	}
	rpc DeleteKey(google.cloud.recaptchaenterprise.v1.DeleteKeyRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/keys/*}"
		};

	}
	rpc MigrateKey(google.cloud.recaptchaenterprise.v1.MigrateKeyRequest) returns (google.cloud.recaptchaenterprise.v1.Key) {
		option (google.api.http) = {
			post: "/v1/{name=projects/*/keys/*}:migrate"
			body: "*"
		};

	}
	rpc GetMetrics(google.cloud.recaptchaenterprise.v1.GetMetricsRequest) returns (google.cloud.recaptchaenterprise.v1.Metrics) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/keys/*/metrics}"
		};

	}
	rpc ListRelatedAccountGroups(google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest) returns (google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*}/relatedaccountgroups"
		};

	}
	rpc ListRelatedAccountGroupMemberships(google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest) returns (google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/relatedaccountgroups/*}/memberships"
		};

	}
	rpc SearchRelatedAccountGroupMemberships(google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest) returns (google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse) {
		option (google.api.method_signature) = "parent,hashed_account_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*}/relatedaccountgroupmemberships:search"
			body: "*"
		};

	}
}

message CreateAssessmentRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Project"
		}
	];
	Assessment assessment = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message AnnotateAssessmentRequest {

	enum Annotation {

		ANNOTATION_UNSPECIFIED = 0;
		LEGITIMATE = 1;
		FRAUDULENT = 2;
		PASSWORD_CORRECT = 3 [
			deprecated = true
		];
		PASSWORD_INCORRECT = 4 [
			deprecated = true
		];
	}

	enum Reason {

		REASON_UNSPECIFIED = 0;
		CHARGEBACK = 1;
		PAYMENT_HEURISTICS = 2;
		INITIATED_TWO_FACTOR = 7;
		PASSED_TWO_FACTOR = 3;
		FAILED_TWO_FACTOR = 4;
		CORRECT_PASSWORD = 5;
		INCORRECT_PASSWORD = 6;
	}

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "recaptchaenterprise.googleapis.com/Assessment"
		}
	];
	Annotation annotation = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated Reason reasons = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	bytes hashed_account_id = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message AnnotateAssessmentResponse {

}

message Assessment {
	option (google.api.resource) = {
		type: "recaptchaenterprise.googleapis.com/Assessment"
		pattern: ["projects/{project}/assessments/{assessment}"]
	};

	string name = 1 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	Event event = 2;
	RiskAnalysis risk_analysis = 3 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	TokenProperties token_properties = 4 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	AccountDefenderAssessment account_defender_assessment = 6;
}

message Event {

	string token = 1 [
		(google.api.field_behavior) = OPTIONAL
	];
	string site_key = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string user_agent = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	string user_ip_address = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
	string expected_action = 5 [
		(google.api.field_behavior) = OPTIONAL
	];
	bytes hashed_account_id = 6 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message RiskAnalysis {

	enum ClassificationReason {

		CLASSIFICATION_REASON_UNSPECIFIED = 0;
		AUTOMATION = 1;
		UNEXPECTED_ENVIRONMENT = 2;
		TOO_MUCH_TRAFFIC = 3;
		UNEXPECTED_USAGE_PATTERNS = 4;
		LOW_CONFIDENCE_SCORE = 5;
	}

	float score = 1;
	repeated ClassificationReason reasons = 2;
}

message TokenProperties {

	enum InvalidReason {

		INVALID_REASON_UNSPECIFIED = 0;
		UNKNOWN_INVALID_REASON = 1;
		MALFORMED = 2;
		EXPIRED = 3;
		DUPE = 4;
		MISSING = 5;
		BROWSER_ERROR = 6;
	}

	bool valid = 1;
	InvalidReason invalid_reason = 2;
	google.protobuf.Timestamp create_time = 3;
	string hostname = 4;
	string action = 5;
}

message AccountDefenderAssessment {

	enum AccountDefenderLabel {

		ACCOUNT_DEFENDER_LABEL_UNSPECIFIED = 0;
		PROFILE_MATCH = 1;
		SUSPICIOUS_LOGIN_ACTIVITY = 2;
		SUSPICIOUS_ACCOUNT_CREATION = 3;
		RELATED_ACCOUNTS_NUMBER_HIGH = 4;
	}

	repeated AccountDefenderLabel labels = 1;
}

message CreateKeyRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Project"
		}
	];
	Key key = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message ListKeysRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Project"
		}
	];
	int32 page_size = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message ListKeysResponse {

	repeated Key keys = 1;
	string next_page_token = 2;
}

message GetKeyRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "recaptchaenterprise.googleapis.com/Key"
		}
	];
}

message UpdateKeyRequest {

	Key key = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.protobuf.FieldMask update_mask = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message DeleteKeyRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "recaptchaenterprise.googleapis.com/Key"
		}
	];
}

message MigrateKeyRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "recaptchaenterprise.googleapis.com/Key"
		}
	];
}

message GetMetricsRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "recaptchaenterprise.googleapis.com/Metrics"
		}
	];
}

message Metrics {
	option (google.api.resource) = {
		type: "recaptchaenterprise.googleapis.com/Metrics"
		pattern: ["projects/{project}/keys/{key}/metrics"]
	};

	string name = 4 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp start_time = 1;
	repeated ScoreMetrics score_metrics = 2;
	repeated ChallengeMetrics challenge_metrics = 3;
}

message Key {
	option (google.api.resource) = {
		type: "recaptchaenterprise.googleapis.com/Key"
		pattern: ["projects/{project}/keys/{key}"]
	};

	string name = 1;
	string display_name = 2;
	oneof platform_settings {
		WebKeySettings web_settings = 3;
		AndroidKeySettings android_settings = 4;
		IOSKeySettings ios_settings = 5;
	}
	map<string, string> labels = 6;
	google.protobuf.Timestamp create_time = 7;
	TestingOptions testing_options = 9;
}

message TestingOptions {

	enum TestingChallenge {

		TESTING_CHALLENGE_UNSPECIFIED = 0;
		NOCAPTCHA = 1;
		UNSOLVABLE_CHALLENGE = 2;
	}

	float testing_score = 1;
	TestingChallenge testing_challenge = 2;
}

message WebKeySettings {

	enum IntegrationType {

		INTEGRATION_TYPE_UNSPECIFIED = 0;
		SCORE = 1;
		CHECKBOX = 2;
		INVISIBLE = 3;
	}

	enum ChallengeSecurityPreference {

		CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED = 0;
		USABILITY = 1;
		BALANCE = 2;
		SECURITY = 3;
	}

	bool allow_all_domains = 3;
	repeated string allowed_domains = 1;
	bool allow_amp_traffic = 2;
	IntegrationType integration_type = 4 [
		(google.api.field_behavior) = REQUIRED
	];
	ChallengeSecurityPreference challenge_security_preference = 5;
}

message AndroidKeySettings {

	bool allow_all_package_names = 2;
	repeated string allowed_package_names = 1;
}

message IOSKeySettings {

	bool allow_all_bundle_ids = 2;
	repeated string allowed_bundle_ids = 1;
}

message ScoreDistribution {

	map<int32, int64> score_buckets = 1;
}

message ScoreMetrics {

	ScoreDistribution overall_metrics = 1;
	map<string, ScoreDistribution> action_metrics = 2;
}

message ChallengeMetrics {

	int64 pageload_count = 1;
	int64 nocaptcha_count = 2;
	int64 failed_count = 3;
	int64 passed_count = 4;
}

message ListRelatedAccountGroupMembershipsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "recaptchaenterprise.googleapis.com/RelatedAccountGroupMembership"
		}
	];
	int32 page_size = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message ListRelatedAccountGroupMembershipsResponse {

	repeated RelatedAccountGroupMembership related_account_group_memberships = 1;
	string next_page_token = 2;
}

message ListRelatedAccountGroupsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "recaptchaenterprise.googleapis.com/RelatedAccountGroup"
		}
	];
	int32 page_size = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message ListRelatedAccountGroupsResponse {

	repeated RelatedAccountGroup related_account_groups = 1;
	string next_page_token = 2;
}

message SearchRelatedAccountGroupMembershipsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "recaptchaenterprise.googleapis.com/RelatedAccountGroupMembership"
		}
	];
	bytes hashed_account_id = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	int32 page_size = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message SearchRelatedAccountGroupMembershipsResponse {

	repeated RelatedAccountGroupMembership related_account_group_memberships = 1;
	string next_page_token = 2;
}

message RelatedAccountGroupMembership {
	option (google.api.resource) = {
		type: "recaptchaenterprise.googleapis.com/RelatedAccountGroupMembership"
		pattern: ["projects/{project}/relatedaccountgroups/{relatedaccountgroup}/memberships/{membership}"]
	};

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "recaptchaenterprise.googleapis.com/RelatedAccountGroupMembership"
		}
	];
	bytes hashed_account_id = 2;
}

message RelatedAccountGroup {
	option (google.api.resource) = {
		type: "recaptchaenterprise.googleapis.com/RelatedAccountGroup"
		pattern: ["projects/{project}/relatedaccountgroups/{relatedaccountgroup}"]
	};

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "recaptchaenterprise.googleapis.com/RelatedAccountGroup"
		}
	];
}
