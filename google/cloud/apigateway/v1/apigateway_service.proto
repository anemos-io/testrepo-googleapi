syntax = "proto3";

package google.cloud.apigateway.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/cloud/apigateway/v1/apigateway.proto";
import "google/longrunning/operations.proto";

option java_package = "com.google.cloud.apigateway.v1";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/apigateway/v1;apigateway";
option csharp_namespace = "Google.Cloud.ApiGateway.V1";
option php_namespace = "Google\\Cloud\\ApiGateway\\V1";
option ruby_package = "Google::Cloud::ApiGateway::V1";


service ApiGatewayService {
	option (google.api.default_host) = "apigateway.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc ListGateways(google.cloud.apigateway.v1.ListGatewaysRequest) returns (google.cloud.apigateway.v1.ListGatewaysResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/gateways"
		};

	}
	rpc GetGateway(google.cloud.apigateway.v1.GetGatewayRequest) returns (google.cloud.apigateway.v1.Gateway) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/gateways/*}"
		};

	}
	rpc CreateGateway(google.cloud.apigateway.v1.CreateGatewayRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Gateway"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,gateway,gateway_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/gateways"
			body: "gateway"
		};

	}
	rpc UpdateGateway(google.cloud.apigateway.v1.UpdateGatewayRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Gateway"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "gateway,update_mask";
		option (google.api.http) = {
			patch: "/v1/{gateway.name=projects/*/locations/*/gateways/*}"
			body: "gateway"
		};

	}
	rpc DeleteGateway(google.cloud.apigateway.v1.DeleteGatewayRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/gateways/*}"
		};

	}
	rpc ListApis(google.cloud.apigateway.v1.ListApisRequest) returns (google.cloud.apigateway.v1.ListApisResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/apis"
		};

	}
	rpc GetApi(google.cloud.apigateway.v1.GetApiRequest) returns (google.cloud.apigateway.v1.Api) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/apis/*}"
		};

	}
	rpc CreateApi(google.cloud.apigateway.v1.CreateApiRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Api"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,api,api_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/apis"
			body: "api"
		};

	}
	rpc UpdateApi(google.cloud.apigateway.v1.UpdateApiRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Api"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "api,update_mask";
		option (google.api.http) = {
			patch: "/v1/{api.name=projects/*/locations/*/apis/*}"
			body: "api"
		};

	}
	rpc DeleteApi(google.cloud.apigateway.v1.DeleteApiRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/apis/*}"
		};

	}
	rpc ListApiConfigs(google.cloud.apigateway.v1.ListApiConfigsRequest) returns (google.cloud.apigateway.v1.ListApiConfigsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*/apis/*}/configs"
		};

	}
	rpc GetApiConfig(google.cloud.apigateway.v1.GetApiConfigRequest) returns (google.cloud.apigateway.v1.ApiConfig) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/apis/*/configs/*}"
		};

	}
	rpc CreateApiConfig(google.cloud.apigateway.v1.CreateApiConfigRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "ApiConfig"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "parent,api_config,api_config_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*/apis/*}/configs"
			body: "api_config"
		};

	}
	rpc UpdateApiConfig(google.cloud.apigateway.v1.UpdateApiConfigRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "ApiConfig"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "api_config,update_mask";
		option (google.api.http) = {
			patch: "/v1/{api_config.name=projects/*/locations/*/apis/*/configs/*}"
			body: "api_config"
		};

	}
	rpc DeleteApiConfig(google.cloud.apigateway.v1.DeleteApiConfigRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "google.protobuf.Empty"
			metadata_type: "OperationMetadata"
		};
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/apis/*/configs/*}"
		};

	}
}
