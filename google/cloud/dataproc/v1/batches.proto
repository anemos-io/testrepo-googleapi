syntax = "proto3";

package google.cloud.dataproc.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/cloud/dataproc/v1/shared.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.cloud.dataproc.v1";
option java_outer_classname = "BatchesProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/dataproc/v1;dataproc";


service BatchController {
	option (google.api.default_host) = "dataproc.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc CreateBatch(google.cloud.dataproc.v1.CreateBatchRequest) returns (google.longrunning.Operation) {
		option (google.longrunning.operation_info) = {
			response_type: "Batch"
			metadata_type: "google.cloud.dataproc.v1.BatchOperationMetadata"
		};
		option (google.api.method_signature) = "parent,batch,batch_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/batches"
			body: "batch"
		};

	}
	rpc GetBatch(google.cloud.dataproc.v1.GetBatchRequest) returns (google.cloud.dataproc.v1.Batch) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/batches/*}"
		};

	}
	rpc ListBatches(google.cloud.dataproc.v1.ListBatchesRequest) returns (google.cloud.dataproc.v1.ListBatchesResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/batches"
		};

	}
	rpc DeleteBatch(google.cloud.dataproc.v1.DeleteBatchRequest) returns (google.protobuf.Empty) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/batches/*}"
		};

	}
}

message CreateBatchRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "dataproc.googleapis.com/Batch"
		}
	];
	Batch batch = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	string batch_id = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	string request_id = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message GetBatchRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "dataproc.googleapis.com/Batch"
		}
	];
}

message ListBatchesRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "dataproc.googleapis.com/Batch"
		}
	];
	int32 page_size = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message ListBatchesResponse {

	repeated Batch batches = 1;
	string next_page_token = 2;
}

message DeleteBatchRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "dataproc.googleapis.com/Batch"
		}
	];
}

message Batch {
	option (google.api.resource) = {
		type: "dataproc.googleapis.com/Batch"
		pattern: ["projects/{project}/locations/{location}/batches/{batch}"]
	};

	message StateHistory {

		State state = 1 [
			(google.api.field_behavior) = OUTPUT_ONLY
		];
		string state_message = 2 [
			(google.api.field_behavior) = OUTPUT_ONLY
		];
		google.protobuf.Timestamp state_start_time = 3 [
			(google.api.field_behavior) = OUTPUT_ONLY
		];
	}

	enum State {

		STATE_UNSPECIFIED = 0;
		PENDING = 1;
		RUNNING = 2;
		CANCELLING = 3;
		CANCELLED = 4;
		SUCCEEDED = 5;
		FAILED = 6;
	}

	string name = 1 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string uuid = 2 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp create_time = 3 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	oneof batch_config {
		PySparkBatch pyspark_batch = 4 [
			(google.api.field_behavior) = OPTIONAL
		];
		SparkBatch spark_batch = 5 [
			(google.api.field_behavior) = OPTIONAL
		];
		SparkRBatch spark_r_batch = 6 [
			(google.api.field_behavior) = OPTIONAL
		];
		SparkSqlBatch spark_sql_batch = 7 [
			(google.api.field_behavior) = OPTIONAL
		];
	}
	google.cloud.dataproc.v1.RuntimeInfo runtime_info = 8 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	State state = 9 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string state_message = 10 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	google.protobuf.Timestamp state_time = 11 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string creator = 12 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	map<string, string> labels = 13 [
		(google.api.field_behavior) = OPTIONAL
	];
	google.cloud.dataproc.v1.RuntimeConfig runtime_config = 14 [
		(google.api.field_behavior) = OPTIONAL
	];
	google.cloud.dataproc.v1.EnvironmentConfig environment_config = 15 [
		(google.api.field_behavior) = OPTIONAL
	];
	string operation = 16 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	repeated StateHistory state_history = 17 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}

message PySparkBatch {

	string main_python_file_uri = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	repeated string args = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string python_file_uris = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string jar_file_uris = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string file_uris = 5 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string archive_uris = 6 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message SparkBatch {

	oneof driver {
		string main_jar_file_uri = 1 [
			(google.api.field_behavior) = OPTIONAL
		];
		string main_class = 2 [
			(google.api.field_behavior) = OPTIONAL
		];
	}
	repeated string args = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string jar_file_uris = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string file_uris = 5 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string archive_uris = 6 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message SparkRBatch {

	string main_r_file_uri = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	repeated string args = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string file_uris = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string archive_uris = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message SparkSqlBatch {

	string query_file_uri = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	map<string, string> query_variables = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	repeated string jar_file_uris = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}
