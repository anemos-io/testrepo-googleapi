syntax = "proto3";

package google.cloud.dataproc.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

option java_package = "com.google.cloud.dataproc.v1";
option java_outer_classname = "AutoscalingPoliciesProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/dataproc/v1;dataproc";
option (google.api.resource_definition) = {
	type: "dataproc.googleapis.com/Region"
	pattern: ["projects/{project}/regions/{region}"]
};


service AutoscalingPolicyService {
	option (google.api.default_host) = "dataproc.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc CreateAutoscalingPolicy(google.cloud.dataproc.v1.CreateAutoscalingPolicyRequest) returns (google.cloud.dataproc.v1.AutoscalingPolicy) {
		option (google.api.method_signature) = "parent,policy";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*/locations/*}/autoscalingPolicies"
			body: "policy"
			additional_bindings: {
				post: "/v1/{parent=projects/*/regions/*}/autoscalingPolicies"
				body: "policy"
			}
		};

	}
	rpc UpdateAutoscalingPolicy(google.cloud.dataproc.v1.UpdateAutoscalingPolicyRequest) returns (google.cloud.dataproc.v1.AutoscalingPolicy) {
		option (google.api.method_signature) = "policy";
		option (google.api.http) = {
			put: "/v1/{policy.name=projects/*/locations/*/autoscalingPolicies/*}"
			body: "policy"
			additional_bindings: {
				put: "/v1/{policy.name=projects/*/regions/*/autoscalingPolicies/*}"
				body: "policy"
			}
		};

	}
	rpc GetAutoscalingPolicy(google.cloud.dataproc.v1.GetAutoscalingPolicyRequest) returns (google.cloud.dataproc.v1.AutoscalingPolicy) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/locations/*/autoscalingPolicies/*}"
			additional_bindings: {
				get: "/v1/{name=projects/*/regions/*/autoscalingPolicies/*}"
			}
		};

	}
	rpc ListAutoscalingPolicies(google.cloud.dataproc.v1.ListAutoscalingPoliciesRequest) returns (google.cloud.dataproc.v1.ListAutoscalingPoliciesResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*/locations/*}/autoscalingPolicies"
			additional_bindings: {
				get: "/v1/{parent=projects/*/regions/*}/autoscalingPolicies"
			}
		};

	}
	rpc DeleteAutoscalingPolicy(google.cloud.dataproc.v1.DeleteAutoscalingPolicyRequest) returns (google.protobuf.Empty) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/locations/*/autoscalingPolicies/*}"
			additional_bindings: {
				delete: "/v1/{name=projects/*/regions/*/autoscalingPolicies/*}"
			}
		};

	}
}

message AutoscalingPolicy {
	option (google.api.resource) = {
		type: "dataproc.googleapis.com/AutoscalingPolicy"
		pattern: ["projects/{project}/locations/{location}/autoscalingPolicies/{autoscaling_policy}","projects/{project}/regions/{region}/autoscalingPolicies/{autoscaling_policy}"]
	};

	string id = 1;
	string name = 2 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	oneof algorithm {
		BasicAutoscalingAlgorithm basic_algorithm = 3 [
			(google.api.field_behavior) = REQUIRED
		];
	}
	InstanceGroupAutoscalingPolicyConfig worker_config = 4 [
		(google.api.field_behavior) = REQUIRED
	];
	InstanceGroupAutoscalingPolicyConfig secondary_worker_config = 5 [
		(google.api.field_behavior) = OPTIONAL
	];
	map<string, string> labels = 6 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message BasicAutoscalingAlgorithm {

	BasicYarnAutoscalingConfig yarn_config = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.protobuf.Duration cooldown_period = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message BasicYarnAutoscalingConfig {

	google.protobuf.Duration graceful_decommission_timeout = 5 [
		(google.api.field_behavior) = REQUIRED
	];
	double scale_up_factor = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	double scale_down_factor = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	double scale_up_min_worker_fraction = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
	double scale_down_min_worker_fraction = 4 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message InstanceGroupAutoscalingPolicyConfig {

	int32 min_instances = 1 [
		(google.api.field_behavior) = OPTIONAL
	];
	int32 max_instances = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	int32 weight = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message CreateAutoscalingPolicyRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "dataproc.googleapis.com/AutoscalingPolicy"
		}
	];
	AutoscalingPolicy policy = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message GetAutoscalingPolicyRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "dataproc.googleapis.com/AutoscalingPolicy"
		}
	];
}

message UpdateAutoscalingPolicyRequest {

	AutoscalingPolicy policy = 1 [
		(google.api.field_behavior) = REQUIRED
	];
}

message DeleteAutoscalingPolicyRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "dataproc.googleapis.com/AutoscalingPolicy"
		}
	];
}

message ListAutoscalingPoliciesRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "dataproc.googleapis.com/AutoscalingPolicy"
		}
	];
	int32 page_size = 2 [
		(google.api.field_behavior) = OPTIONAL
	];
	string page_token = 3 [
		(google.api.field_behavior) = OPTIONAL
	];
}

message ListAutoscalingPoliciesResponse {

	repeated AutoscalingPolicy policies = 1 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
	string next_page_token = 2 [
		(google.api.field_behavior) = OUTPUT_ONLY
	];
}
