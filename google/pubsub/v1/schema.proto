syntax = "proto3";

package google.pubsub.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";

option java_package = "com.google.pubsub.v1";
option java_outer_classname = "SchemaProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/pubsub/v1;pubsub";
option cc_enable_arenas = true;
option csharp_namespace = "Google.Cloud.PubSub.V1";
option php_namespace = "Google\\Cloud\\PubSub\\V1";
option ruby_package = "Google::Cloud::PubSub::V1";


enum SchemaView {

	SCHEMA_VIEW_UNSPECIFIED = 0;
	BASIC = 1;
	FULL = 2;
}

enum Encoding {

	ENCODING_UNSPECIFIED = 0;
	JSON = 1;
	BINARY = 2;
}

service SchemaService {
	option (google.api.default_host) = "pubsub.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/pubsub";

	rpc CreateSchema(google.pubsub.v1.CreateSchemaRequest) returns (google.pubsub.v1.Schema) {
		option (google.api.method_signature) = "parent,schema,schema_id";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*}/schemas"
			body: "schema"
		};

	}
	rpc GetSchema(google.pubsub.v1.GetSchemaRequest) returns (google.pubsub.v1.Schema) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v1/{name=projects/*/schemas/*}"
		};

	}
	rpc ListSchemas(google.pubsub.v1.ListSchemasRequest) returns (google.pubsub.v1.ListSchemasResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			get: "/v1/{parent=projects/*}/schemas"
		};

	}
	rpc DeleteSchema(google.pubsub.v1.DeleteSchemaRequest) returns (google.protobuf.Empty) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/schemas/*}"
		};

	}
	rpc ValidateSchema(google.pubsub.v1.ValidateSchemaRequest) returns (google.pubsub.v1.ValidateSchemaResponse) {
		option (google.api.method_signature) = "parent,schema";
		option (google.api.http) = {
			post: "/v1/{parent=projects/*}/schemas:validate"
			body: "*"
		};

	}
	rpc ValidateMessage(google.pubsub.v1.ValidateMessageRequest) returns (google.pubsub.v1.ValidateMessageResponse) {
		option (google.api.http) = {
			post: "/v1/{parent=projects/*}/schemas:validateMessage"
			body: "*"
		};

	}
}

message Schema {
	option (google.api.resource) = {
		type: "pubsub.googleapis.com/Schema"
		pattern: ["projects/{project}/schemas/{schema}"]
	};

	enum Type {

		TYPE_UNSPECIFIED = 0;
		PROTOCOL_BUFFER = 1;
		AVRO = 2;
	}

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	Type type = 2;
	string definition = 3;
}

message CreateSchemaRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "pubsub.googleapis.com/Schema"
		}
	];
	Schema schema = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	string schema_id = 3;
}

message GetSchemaRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "pubsub.googleapis.com/Schema"
		}
	];
	SchemaView view = 2;
}

message ListSchemasRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Project"
		}
	];
	SchemaView view = 2;
	int32 page_size = 3;
	string page_token = 4;
}

message ListSchemasResponse {

	repeated Schema schemas = 1;
	string next_page_token = 2;
}

message DeleteSchemaRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "pubsub.googleapis.com/Schema"
		}
	];
}

message ValidateSchemaRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Project"
		}
	];
	Schema schema = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message ValidateSchemaResponse {

}

message ValidateMessageRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "cloudresourcemanager.googleapis.com/Project"
		}
	];
	oneof schema_spec {
		string name = 2 [
			(google.api.resource_reference) = {
				type: "pubsub.googleapis.com/Schema"
			}
		];
		Schema schema = 3;
	}
	bytes message = 4;
	Encoding encoding = 5;
}

message ValidateMessageResponse {

}
