syntax = "proto3";

package google.bigtable.v2;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/bigtable/v2/data.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";

option java_package = "com.google.bigtable.v2";
option java_outer_classname = "BigtableProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/bigtable/v2;bigtable";
option csharp_namespace = "Google.Cloud.Bigtable.V2";
option php_namespace = "Google\\Cloud\\Bigtable\\V2";
option ruby_package = "Google::Cloud::Bigtable::V2";
option (google.api.resource_definition) = {
	type: "bigtable.googleapis.com/Table"
	pattern: ["projects/{project}/instances/{instance}/tables/{table}"]
};


service Bigtable {
	option (google.api.default_host) = "bigtable.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/bigtable.data,https://www.googleapis.com/auth/bigtable.data.readonly,https://www.googleapis.com/auth/cloud-bigtable.data,https://www.googleapis.com/auth/cloud-bigtable.data.readonly,https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platform.read-only";

	rpc ReadRows(google.bigtable.v2.ReadRowsRequest) returns (stream google.bigtable.v2.ReadRowsResponse) {
		option (google.api.method_signature) = "table_name";
		option (google.api.method_signature) = "table_name,app_profile_id";
		option (google.api.http) = {
			post: "/v2/{table_name=projects/*/instances/*/tables/*}:readRows"
			body: "*"
		};

	}
	rpc SampleRowKeys(google.bigtable.v2.SampleRowKeysRequest) returns (stream google.bigtable.v2.SampleRowKeysResponse) {
		option (google.api.method_signature) = "table_name";
		option (google.api.method_signature) = "table_name,app_profile_id";
		option (google.api.http) = {
			get: "/v2/{table_name=projects/*/instances/*/tables/*}:sampleRowKeys"
		};

	}
	rpc MutateRow(google.bigtable.v2.MutateRowRequest) returns (google.bigtable.v2.MutateRowResponse) {
		option (google.api.method_signature) = "table_name,row_key,mutations";
		option (google.api.method_signature) = "table_name,row_key,mutations,app_profile_id";
		option (google.api.http) = {
			post: "/v2/{table_name=projects/*/instances/*/tables/*}:mutateRow"
			body: "*"
		};

	}
	rpc MutateRows(google.bigtable.v2.MutateRowsRequest) returns (stream google.bigtable.v2.MutateRowsResponse) {
		option (google.api.method_signature) = "table_name,entries";
		option (google.api.method_signature) = "table_name,entries,app_profile_id";
		option (google.api.http) = {
			post: "/v2/{table_name=projects/*/instances/*/tables/*}:mutateRows"
			body: "*"
		};

	}
	rpc CheckAndMutateRow(google.bigtable.v2.CheckAndMutateRowRequest) returns (google.bigtable.v2.CheckAndMutateRowResponse) {
		option (google.api.method_signature) = "table_name,row_key,predicate_filter,true_mutations,false_mutations";
		option (google.api.method_signature) = "table_name,row_key,predicate_filter,true_mutations,false_mutations,app_profile_id";
		option (google.api.http) = {
			post: "/v2/{table_name=projects/*/instances/*/tables/*}:checkAndMutateRow"
			body: "*"
		};

	}
	rpc ReadModifyWriteRow(google.bigtable.v2.ReadModifyWriteRowRequest) returns (google.bigtable.v2.ReadModifyWriteRowResponse) {
		option (google.api.method_signature) = "table_name,row_key,rules";
		option (google.api.method_signature) = "table_name,row_key,rules,app_profile_id";
		option (google.api.http) = {
			post: "/v2/{table_name=projects/*/instances/*/tables/*}:readModifyWriteRow"
			body: "*"
		};

	}
}

message ReadRowsRequest {

	string table_name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "bigtable.googleapis.com/Table"
		}
	];
	string app_profile_id = 5;
	google.bigtable.v2.RowSet rows = 2;
	google.bigtable.v2.RowFilter filter = 3;
	int64 rows_limit = 4;
}

message ReadRowsResponse {

	message CellChunk {

		bytes row_key = 1;
		google.protobuf.StringValue family_name = 2;
		google.protobuf.BytesValue qualifier = 3;
		int64 timestamp_micros = 4;
		repeated string labels = 5;
		bytes value = 6;
		int32 value_size = 7;
		oneof row_status {
			bool reset_row = 8;
			bool commit_row = 9;
		}
	}

	repeated CellChunk chunks = 1;
	bytes last_scanned_row_key = 2;
}

message SampleRowKeysRequest {

	string table_name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "bigtable.googleapis.com/Table"
		}
	];
	string app_profile_id = 2;
}

message SampleRowKeysResponse {

	bytes row_key = 1;
	int64 offset_bytes = 2;
}

message MutateRowRequest {

	string table_name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "bigtable.googleapis.com/Table"
		}
	];
	string app_profile_id = 4;
	bytes row_key = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	repeated google.bigtable.v2.Mutation mutations = 3 [
		(google.api.field_behavior) = REQUIRED
	];
}

message MutateRowResponse {

}

message MutateRowsRequest {

	message Entry {

		bytes row_key = 1;
		repeated google.bigtable.v2.Mutation mutations = 2 [
			(google.api.field_behavior) = REQUIRED
		];
	}

	string table_name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "bigtable.googleapis.com/Table"
		}
	];
	string app_profile_id = 3;
	repeated Entry entries = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message MutateRowsResponse {

	message Entry {

		int64 index = 1;
		google.rpc.Status status = 2;
	}

	repeated Entry entries = 1;
}

message CheckAndMutateRowRequest {

	string table_name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "bigtable.googleapis.com/Table"
		}
	];
	string app_profile_id = 7;
	bytes row_key = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	google.bigtable.v2.RowFilter predicate_filter = 6;
	repeated google.bigtable.v2.Mutation true_mutations = 4;
	repeated google.bigtable.v2.Mutation false_mutations = 5;
}

message CheckAndMutateRowResponse {

	bool predicate_matched = 1;
}

message ReadModifyWriteRowRequest {

	string table_name = 1 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "bigtable.googleapis.com/Table"
		}
	];
	string app_profile_id = 4;
	bytes row_key = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	repeated google.bigtable.v2.ReadModifyWriteRule rules = 3 [
		(google.api.field_behavior) = REQUIRED
	];
}

message ReadModifyWriteRowResponse {

	google.bigtable.v2.Row row = 1;
}
