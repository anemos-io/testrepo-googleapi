syntax = "proto3";

package google.firestore.v1beta1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/firestore/v1beta1/common.proto";
import "google/firestore/v1beta1/document.proto";
import "google/firestore/v1beta1/query.proto";
import "google/firestore/v1beta1/write.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

option java_package = "com.google.firestore.v1beta1";
option java_outer_classname = "FirestoreProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/firestore/v1beta1;firestore";
option objc_class_prefix = "GCFS";
option csharp_namespace = "Google.Cloud.Firestore.V1Beta1";
option php_namespace = "Google\\Cloud\\Firestore\\V1beta1";
option ruby_package = "Google::Cloud::Firestore::V1beta1";


service Firestore {
	option (google.api.default_host) = "firestore.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore";

	rpc GetDocument(google.firestore.v1beta1.GetDocumentRequest) returns (google.firestore.v1beta1.Document) {
		option (google.api.http) = {
			get: "/v1beta1/{name=projects/*/databases/*/documents/*/**}"
		};

	}
	rpc ListDocuments(google.firestore.v1beta1.ListDocumentsRequest) returns (google.firestore.v1beta1.ListDocumentsResponse) {
		option (google.api.http) = {
			get: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}"
		};

	}
	rpc UpdateDocument(google.firestore.v1beta1.UpdateDocumentRequest) returns (google.firestore.v1beta1.Document) {
		option (google.api.method_signature) = "document,update_mask";
		option (google.api.http) = {
			patch: "/v1beta1/{document.name=projects/*/databases/*/documents/*/**}"
			body: "document"
		};

	}
	rpc DeleteDocument(google.firestore.v1beta1.DeleteDocumentRequest) returns (google.protobuf.Empty) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v1beta1/{name=projects/*/databases/*/documents/*/**}"
		};

	}
	rpc BatchGetDocuments(google.firestore.v1beta1.BatchGetDocumentsRequest) returns (stream google.firestore.v1beta1.BatchGetDocumentsResponse) {
		option (google.api.http) = {
			post: "/v1beta1/{database=projects/*/databases/*}/documents:batchGet"
			body: "*"
		};

	}
	rpc BeginTransaction(google.firestore.v1beta1.BeginTransactionRequest) returns (google.firestore.v1beta1.BeginTransactionResponse) {
		option (google.api.method_signature) = "database";
		option (google.api.http) = {
			post: "/v1beta1/{database=projects/*/databases/*}/documents:beginTransaction"
			body: "*"
		};

	}
	rpc Commit(google.firestore.v1beta1.CommitRequest) returns (google.firestore.v1beta1.CommitResponse) {
		option (google.api.method_signature) = "database,writes";
		option (google.api.http) = {
			post: "/v1beta1/{database=projects/*/databases/*}/documents:commit"
			body: "*"
		};

	}
	rpc Rollback(google.firestore.v1beta1.RollbackRequest) returns (google.protobuf.Empty) {
		option (google.api.method_signature) = "database,transaction";
		option (google.api.http) = {
			post: "/v1beta1/{database=projects/*/databases/*}/documents:rollback"
			body: "*"
		};

	}
	rpc RunQuery(google.firestore.v1beta1.RunQueryRequest) returns (stream google.firestore.v1beta1.RunQueryResponse) {
		option (google.api.http) = {
			post: "/v1beta1/{parent=projects/*/databases/*/documents}:runQuery"
			body: "*"
			additional_bindings: {
				post: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:runQuery"
				body: "*"
			}
		};

	}
	rpc PartitionQuery(google.firestore.v1beta1.PartitionQueryRequest) returns (google.firestore.v1beta1.PartitionQueryResponse) {
		option (google.api.http) = {
			post: "/v1beta1/{parent=projects/*/databases/*/documents}:partitionQuery"
			body: "*"
			additional_bindings: {
				post: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery"
				body: "*"
			}
		};

	}
	rpc Write(stream google.firestore.v1beta1.WriteRequest) returns (stream google.firestore.v1beta1.WriteResponse) {
		option (google.api.http) = {
			post: "/v1beta1/{database=projects/*/databases/*}/documents:write"
			body: "*"
		};

	}
	rpc Listen(stream google.firestore.v1beta1.ListenRequest) returns (stream google.firestore.v1beta1.ListenResponse) {
		option (google.api.http) = {
			post: "/v1beta1/{database=projects/*/databases/*}/documents:listen"
			body: "*"
		};

	}
	rpc ListCollectionIds(google.firestore.v1beta1.ListCollectionIdsRequest) returns (google.firestore.v1beta1.ListCollectionIdsResponse) {
		option (google.api.method_signature) = "parent";
		option (google.api.http) = {
			post: "/v1beta1/{parent=projects/*/databases/*/documents}:listCollectionIds"
			body: "*"
			additional_bindings: {
				post: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds"
				body: "*"
			}
		};

	}
	rpc BatchWrite(google.firestore.v1beta1.BatchWriteRequest) returns (google.firestore.v1beta1.BatchWriteResponse) {
		option (google.api.http) = {
			post: "/v1beta1/{database=projects/*/databases/*}/documents:batchWrite"
			body: "*"
		};

	}
	rpc CreateDocument(google.firestore.v1beta1.CreateDocumentRequest) returns (google.firestore.v1beta1.Document) {
		option (google.api.http) = {
			post: "/v1beta1/{parent=projects/*/databases/*/documents/**}/{collection_id}"
			body: "document"
		};

	}
}

message GetDocumentRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.firestore.v1beta1.DocumentMask mask = 2;
	oneof consistency_selector {
		bytes transaction = 3;
		google.protobuf.Timestamp read_time = 5;
	}
}

message ListDocumentsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string collection_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	int32 page_size = 3;
	string page_token = 4;
	string order_by = 6;
	google.firestore.v1beta1.DocumentMask mask = 7;
	oneof consistency_selector {
		bytes transaction = 8;
		google.protobuf.Timestamp read_time = 10;
	}
	bool show_missing = 12;
}

message ListDocumentsResponse {

	repeated google.firestore.v1beta1.Document documents = 1;
	string next_page_token = 2;
}

message CreateDocumentRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string collection_id = 2 [
		(google.api.field_behavior) = REQUIRED
	];
	string document_id = 3;
	google.firestore.v1beta1.Document document = 4 [
		(google.api.field_behavior) = REQUIRED
	];
	google.firestore.v1beta1.DocumentMask mask = 5;
}

message UpdateDocumentRequest {

	google.firestore.v1beta1.Document document = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.firestore.v1beta1.DocumentMask update_mask = 2;
	google.firestore.v1beta1.DocumentMask mask = 3;
	google.firestore.v1beta1.Precondition current_document = 4;
}

message DeleteDocumentRequest {

	string name = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.firestore.v1beta1.Precondition current_document = 2;
}

message BatchGetDocumentsRequest {

	string database = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	repeated string documents = 2;
	google.firestore.v1beta1.DocumentMask mask = 3;
	oneof consistency_selector {
		bytes transaction = 4;
		google.firestore.v1beta1.TransactionOptions new_transaction = 5;
		google.protobuf.Timestamp read_time = 7;
	}
}

message BatchGetDocumentsResponse {

	oneof result {
		google.firestore.v1beta1.Document found = 1;
		string missing = 2;
	}
	bytes transaction = 3;
	google.protobuf.Timestamp read_time = 4;
}

message BeginTransactionRequest {

	string database = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	google.firestore.v1beta1.TransactionOptions options = 2;
}

message BeginTransactionResponse {

	bytes transaction = 1;
}

message CommitRequest {

	string database = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	repeated google.firestore.v1beta1.Write writes = 2;
	bytes transaction = 3;
}

message CommitResponse {

	repeated google.firestore.v1beta1.WriteResult write_results = 1;
	google.protobuf.Timestamp commit_time = 2;
}

message RollbackRequest {

	string database = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	bytes transaction = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message RunQueryRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	oneof query_type {
		google.firestore.v1beta1.StructuredQuery structured_query = 2;
	}
	oneof consistency_selector {
		bytes transaction = 5;
		google.firestore.v1beta1.TransactionOptions new_transaction = 6;
		google.protobuf.Timestamp read_time = 7;
	}
}

message RunQueryResponse {

	bytes transaction = 2;
	google.firestore.v1beta1.Document document = 1;
	google.protobuf.Timestamp read_time = 3;
	int32 skipped_results = 4;
}

message PartitionQueryRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	oneof query_type {
		google.firestore.v1beta1.StructuredQuery structured_query = 2;
	}
	int64 partition_count = 3;
	string page_token = 4;
	int32 page_size = 5;
}

message PartitionQueryResponse {

	repeated google.firestore.v1beta1.Cursor partitions = 1;
	string next_page_token = 2;
}

message WriteRequest {

	string database = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	string stream_id = 2;
	repeated google.firestore.v1beta1.Write writes = 3;
	bytes stream_token = 4;
	map<string, string> labels = 5;
}

message WriteResponse {

	string stream_id = 1;
	bytes stream_token = 2;
	repeated google.firestore.v1beta1.WriteResult write_results = 3;
	google.protobuf.Timestamp commit_time = 4;
}

message ListenRequest {

	string database = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	oneof target_change {
		Target add_target = 2;
		int32 remove_target = 3;
	}
	map<string, string> labels = 4;
}

message ListenResponse {

	oneof response_type {
		TargetChange target_change = 2;
		google.firestore.v1beta1.DocumentChange document_change = 3;
		google.firestore.v1beta1.DocumentDelete document_delete = 4;
		google.firestore.v1beta1.DocumentRemove document_remove = 6;
		google.firestore.v1beta1.ExistenceFilter filter = 5;
	}
}

message Target {

	message DocumentsTarget {

		repeated string documents = 2;
	}

	message QueryTarget {

		string parent = 1;
		oneof query_type {
			google.firestore.v1beta1.StructuredQuery structured_query = 2;
		}
	}

	oneof target_type {
		QueryTarget query = 2;
		DocumentsTarget documents = 3;
	}
	oneof resume_type {
		bytes resume_token = 4;
		google.protobuf.Timestamp read_time = 11;
	}
	int32 target_id = 5;
	bool once = 6;
}

message TargetChange {

	enum TargetChangeType {

		NO_CHANGE = 0;
		ADD = 1;
		REMOVE = 2;
		CURRENT = 3;
		RESET = 4;
	}

	TargetChangeType target_change_type = 1;
	repeated int32 target_ids = 2;
	google.rpc.Status cause = 3;
	bytes resume_token = 4;
	google.protobuf.Timestamp read_time = 6;
}

message ListCollectionIdsRequest {

	string parent = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	int32 page_size = 2;
	string page_token = 3;
}

message ListCollectionIdsResponse {

	repeated string collection_ids = 1;
	string next_page_token = 2;
}

message BatchWriteRequest {

	string database = 1 [
		(google.api.field_behavior) = REQUIRED
	];
	repeated google.firestore.v1beta1.Write writes = 2;
	map<string, string> labels = 3;
}

message BatchWriteResponse {

	repeated google.firestore.v1beta1.WriteResult write_results = 1;
	repeated google.rpc.Status status = 2;
}
