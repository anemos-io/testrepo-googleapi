syntax = "proto3";

package google.monitoring.v3;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/monitoring/v3/alert.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option java_package = "com.google.monitoring.v3";
option java_outer_classname = "AlertServiceProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/monitoring/v3;monitoring";
option csharp_namespace = "Google.Cloud.Monitoring.V3";
option php_namespace = "Google\\Cloud\\Monitoring\\V3";
option ruby_package = "Google::Cloud::Monitoring::V3";


service AlertPolicyService {
	option (google.api.default_host) = "monitoring.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/monitoring,https://www.googleapis.com/auth/monitoring.read";

	rpc ListAlertPolicies(google.monitoring.v3.ListAlertPoliciesRequest) returns (google.monitoring.v3.ListAlertPoliciesResponse) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v3/{name=projects/*}/alertPolicies"
		};

	}
	rpc GetAlertPolicy(google.monitoring.v3.GetAlertPolicyRequest) returns (google.monitoring.v3.AlertPolicy) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			get: "/v3/{name=projects/*/alertPolicies/*}"
		};

	}
	rpc CreateAlertPolicy(google.monitoring.v3.CreateAlertPolicyRequest) returns (google.monitoring.v3.AlertPolicy) {
		option (google.api.method_signature) = "name,alert_policy";
		option (google.api.http) = {
			post: "/v3/{name=projects/*}/alertPolicies"
			body: "alert_policy"
		};

	}
	rpc DeleteAlertPolicy(google.monitoring.v3.DeleteAlertPolicyRequest) returns (google.protobuf.Empty) {
		option (google.api.method_signature) = "name";
		option (google.api.http) = {
			delete: "/v3/{name=projects/*/alertPolicies/*}"
		};

	}
	rpc UpdateAlertPolicy(google.monitoring.v3.UpdateAlertPolicyRequest) returns (google.monitoring.v3.AlertPolicy) {
		option (google.api.method_signature) = "update_mask,alert_policy";
		option (google.api.http) = {
			patch: "/v3/{alert_policy.name=projects/*/alertPolicies/*}"
			body: "alert_policy"
		};

	}
}

message CreateAlertPolicyRequest {

	string name = 3 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "monitoring.googleapis.com/AlertPolicy"
		}
	];
	google.monitoring.v3.AlertPolicy alert_policy = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

message GetAlertPolicyRequest {

	string name = 3 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "monitoring.googleapis.com/AlertPolicy"
		}
	];
}

message ListAlertPoliciesRequest {

	string name = 4 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			child_type: "monitoring.googleapis.com/AlertPolicy"
		}
	];
	string filter = 5;
	string order_by = 6;
	int32 page_size = 2;
	string page_token = 3;
}

message ListAlertPoliciesResponse {

	repeated google.monitoring.v3.AlertPolicy alert_policies = 3;
	string next_page_token = 2;
	int32 total_size = 4;
}

message UpdateAlertPolicyRequest {

	google.protobuf.FieldMask update_mask = 2;
	google.monitoring.v3.AlertPolicy alert_policy = 3 [
		(google.api.field_behavior) = REQUIRED
	];
}

message DeleteAlertPolicyRequest {

	string name = 3 [
		(google.api.field_behavior) = REQUIRED
		(google.api.resource_reference) = {
			type: "monitoring.googleapis.com/AlertPolicy"
		}
	];
}
