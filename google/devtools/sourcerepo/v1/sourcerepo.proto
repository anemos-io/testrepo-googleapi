syntax = "proto3";

package google.devtools.sourcerepo.v1;

import "google/api/annotations.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/protobuf/empty.proto";

option java_package = "com.google.devtools.sourcerepo.v1";
option java_outer_classname = "SourceRepoProto";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/devtools/sourcerepo/v1;sourcerepo";


service SourceRepo {

	rpc ListRepos(google.devtools.sourcerepo.v1.ListReposRequest) returns (google.devtools.sourcerepo.v1.ListReposResponse) {
		option (google.api.http) = {
			get: "/v1/{name=projects/*}/repos"
		};

	}
	rpc GetRepo(google.devtools.sourcerepo.v1.GetRepoRequest) returns (google.devtools.sourcerepo.v1.Repo) {
		option (google.api.http) = {
			get: "/v1/{name=projects/*/repos/**}"
		};

	}
	rpc CreateRepo(google.devtools.sourcerepo.v1.CreateRepoRequest) returns (google.devtools.sourcerepo.v1.Repo) {
		option (google.api.http) = {
			post: "/v1/{parent=projects/*}/repos"
			body: "repo"
		};

	}
	rpc DeleteRepo(google.devtools.sourcerepo.v1.DeleteRepoRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/v1/{name=projects/*/repos/**}"
		};

	}
	rpc SetIamPolicy(google.iam.v1.SetIamPolicyRequest) returns (google.iam.v1.Policy) {
		option (google.api.http) = {
			post: "/v1/{resource=projects/*/repos/**}:setIamPolicy"
			body: "*"
		};

	}
	rpc GetIamPolicy(google.iam.v1.GetIamPolicyRequest) returns (google.iam.v1.Policy) {
		option (google.api.http) = {
			get: "/v1/{resource=projects/*/repos/**}:getIamPolicy"
		};

	}
	rpc TestIamPermissions(google.iam.v1.TestIamPermissionsRequest) returns (google.iam.v1.TestIamPermissionsResponse) {
		option (google.api.http) = {
			post: "/v1/{resource=projects/*/repos/**}:testIamPermissions"
			body: "*"
		};

	}
}

message Repo {

	string name = 1;
	int64 size = 2;
	string url = 3;
	MirrorConfig mirror_config = 4;
}

message MirrorConfig {

	string url = 1;
	string webhook_id = 2;
	string deploy_key_id = 3;
}

message GetRepoRequest {

	string name = 1;
}

message ListReposRequest {

	string name = 1;
	int32 page_size = 2;
	string page_token = 3;
}

message ListReposResponse {

	repeated Repo repos = 1;
	string next_page_token = 2;
}

message CreateRepoRequest {

	string parent = 1;
	Repo repo = 2;
}

message DeleteRepoRequest {

	string name = 1;
}
