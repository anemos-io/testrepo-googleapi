syntax = "proto3";

package google.devtools.containeranalysis.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.containeranalysis.v1";
option java_multiple_files = true;
option go_package = "google.golang.org/genproto/googleapis/devtools/containeranalysis/v1;containeranalysis";
option objc_class_prefix = "GCA";
option csharp_namespace = "Google.Cloud.DevTools.ContainerAnalysis.V1";
option ruby_package = "Google::Cloud::ContainerAnalysis::V1";


service ContainerAnalysis {
	option (google.api.default_host) = "containeranalysis.googleapis.com";
	option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

	rpc SetIamPolicy(google.iam.v1.SetIamPolicyRequest) returns (google.iam.v1.Policy) {
		option (google.api.method_signature) = "resource,policy";
		option (google.api.http) = {
			post: "/v1/{resource=projects/*/notes/*}:setIamPolicy"
			body: "*"
			additional_bindings: {
				post: "/v1/{resource=projects/*/occurrences/*}:setIamPolicy"
				body: "*"
			}
		};

	}
	rpc GetIamPolicy(google.iam.v1.GetIamPolicyRequest) returns (google.iam.v1.Policy) {
		option (google.api.method_signature) = "resource";
		option (google.api.http) = {
			post: "/v1/{resource=projects/*/notes/*}:getIamPolicy"
			body: "*"
			additional_bindings: {
				post: "/v1/{resource=projects/*/occurrences/*}:getIamPolicy"
				body: "*"
			}
		};

	}
	rpc TestIamPermissions(google.iam.v1.TestIamPermissionsRequest) returns (google.iam.v1.TestIamPermissionsResponse) {
		option (google.api.method_signature) = "resource,permissions";
		option (google.api.http) = {
			post: "/v1/{resource=projects/*/notes/*}:testIamPermissions"
			body: "*"
			additional_bindings: {
				post: "/v1/{resource=projects/*/occurrences/*}:testIamPermissions"
				body: "*"
			}
		};

	}
}
